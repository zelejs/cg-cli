package=$1
name=$2
binding=$3
if [[ $package == *.jar ]];then  
    cmd=api
else
    cmd=web
fi
## less effect 
if [[ $cmd == api ]];then
   PORT='8080'
   data=$4
elif [[ $cmd == web ]];then
   PORT='80'
fi

## get package from url
if [[ $package == https://* ]];then
   cd ~/$name/web

   packname=$(basename $package)
   if [ -f $packname ];then 
      rm $packname
   fi
   wget $package

   ## extract
   if [[ $packname == *.jar ]];then
      mv $packname api
   else
      if [ -d dist ];then
         rm -rf dist
      fi
      if [[ $packname == *.zip ]];then
         unzip $packname
      elif [[ $packname == *.tar ]];then
         tar xvf $package
      elif [[ $packname == *.tar.gz ]];then
         tar zxvf $package
      fi

      ## make sure dist is sucessful
      rm $packname
      if [ ! -d dist ];then
         echo "unzip $packname failure !"
         exit
      fi
   fi
fi

## check dist exists
if [ ! -d ~/$name/web/dist ];then
   echo "~/$name/web/dist not exists"
   exit
fi

## check docker rnning
ip=$(docker inspect $name --format '{{.NetworkSettings.IPAddress}}')
if [ ! $ip ];then
   if [[ $cmd == api ]];then
      echo "=>docker run --name $name -d -e MYSQL_URL=$data -v ~/$name/api:/webapps -p $binding:$PORT zelejs/allin-web:slim"
      docker run --name $name -d -e MYSQL_URL=$data  -v ~/$name/api:/webapps -p $binding:$PORT zelejs/allin-web:slim
   elif [[ $cmd == web ]];then
      echo "=>docker run --name $name -v ~/$name/web/dist:/var/www/html -p $binding:$PORT -d zelejs/allin-web:slim"
      docker run --name $name -v ~/$name/web/dist:/var/www/html -p $binding:$PORT -d zelejs/allin-web:slim
   fi
   exit
fi

######################################
## find port binds
gen_used_ports() {
   ports=$(docker port $name)
   ports=${ports// -> /->}
   #8080/tcp->0.0.0.0:10080

   ## for each port binding  
   new_ports=''
   for port in $ports;do
      
      ## get host port
      host_port=$port
      host_port=${host_port#*:}  ## remove all before :

      ## get node port
      node_port=$port
      node_port=${node_port%\/*}  ## remove all after /

      new_ports="$new_ports -p $host_port:$node_port"
   done

   echo $new_ports
}

binding_port="$binding:$PORT"
used_ports=$(gen_used_ports)

## if binding already exist, just restart the node
if [[ $used_ports == *[[:space:]]$binding_port* ]];then
   echo "=>docker restart $name"
   docker restart $name
   exit
fi

## if 8080/80 already exist, but binding changed, replace
if [[ $used_ports == *:$PORT* ]];then
    used_ports=${used_ports//[[:digit:]]*:$PORT/$binding:$PORT}
fi
## end port binds #########################


######################################
## find volume binds
gen_used_binds() {
    name=$1
    binds=$(docker inspect $name --format '{{ .HostConfig.Binds}}')
    binds=${binds//\[/}  ## remove [
    binds=${binds//\]/}  ## remove ]

    new_binds=''
    for bind in $binds;do
        new_binds="$new_binds -v $bind"
    done
    echo $new_binds
}

used_binds=$(gen_used_binds $name)
if [[ $cmd == api ]];then
   if [[ $used_binds == */webapps* ]];then
      ## ok
      used_binds=$used_binds
   else
      used_binds="$used_binds -v ~/$name/api:/webapps"
   fi
elif  [[ $cmd == web ]];then
   if [[ $used_binds == */var/www/html* ]];then
      ## ok
      used_binds=$used_binds
   else
      used_binds="$used_binds -v ~/$name/web/dist:/var/www/html"
   fi
fi
## end volume binds #########################

######################################
## find envs
gen_used_envs() {
    name=$1
    envs=$(docker inspect $name --format '{{ .Config.env}}')
    envs=${envs//\[/}  ## remove [
    envs=${envs//\]/}  ## remove ]

    new_envs=''
    for bind in $binds;do
        if [[ $bind == TZ=* ]];then 
           continue
        fi
        if [[ $bind == LANG=* ]];then 
           continue
        fi
        if [[ $bind == PATH=* ]];then 
           continue
        fi
        if [[ $bind == JAVA* ]];then 
           continue
        fi
        ## split =
        ENV_NAME=${bind%=*}
        ENV_VALUE=${bind#*=}

        new_envs="$new_envs -e $ENV_NAME $ENV_VALUE"
    done
    echo $new_envs
}

used_envs=$(gen_used_envs $name)

if [[ $cmd == api ]];then
   if [[ $used_envs == *MYSQL_URL* ]];then
      ## ok
      used_envs=$used_envs
   else
      used_envs="$used_envs -e MYSQL_URL=$data "
   fi
fi
## end volume binds #########################


## no port found, run again
echo "=>docker stop $name"
docker stop $name
echo "=>docker rm $name"
docker rm $name
echo "=>docker run --name $name $used_envs $used_binds $used_ports -d zelejs/allin-web:slim"
docker run --name $name $used_envs $used_binds $used_ports -d zelejs/allin-web:slim
