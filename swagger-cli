#!/usr/bin/perl

my $method = shift @ARGV;
my $api = shift @ARGV;
my $cmd = shift @ARGV;

sub usage{
   print "Usage: swagger-cli <method> <api> [trace]\n";
   print "       swagger-cli .\n";
}

sub println{
   my $line=$_;
   print "$line\n";
}

my $usage = (!$method) || (!$api && ($method && $method!~/\./) && ($method && $method!~/save/) || ($cmd && $cmd!~/trace/) );
if ($usage){
   &usage;
   exit(0);
}


# if method=. means no method for swagger_parse.js
if ($method=~/\./){
    $method = shift @ARGV;
}

# input api can ignore /api
$api =~ s/^\/api//;
if($api){
   $api = "/api$api";
}


## get swagger.json from app.swagger
my $app_swagger = "app.swagger";
my $swagger_ignores = "swagger.ignores";

my $swagger_path=$input;  ##参数
if(-e $app_swagger){
   $swagger_path = &get_line($app_swagger);
}else{
   if( -f 'target/swagger/swagger.json' ){
      $swagger_path='./target/swagger/swagger.json';
   }elsif(-f 'swagger/swagger.json' ){
      $swagger_path='./swagger/swagger.json';
   }elsif(-f 'swagger.json' ){
      $swagger_path='./swagger.json';
   }
}

## check exists
if (!(-e $swagger_path)){
   print "$swagger_path not exists !\n";
   exit(0);
}

## ignore hash
my %hash = {};
###
if ( -f $swagger_ignores){
my @ignores = &get_lines($swagger_ignores);
   foreach my $skip (@ignores){
      if($skip=~/^[\s\t]+$/){
         #print "empty line\n";
      }else{
         # remove newline
         $skip =~ s/[\r\n\t\s]+//;

         # trim /{id}
         $skip =~ s/\/\{id\}$//;

         $hash{$skip} = $skip;
      }
   }
}


##
## main #####
##
my $dir=&abs_glob;

$api =~  s/^\///;
my $result = `node $dir/swagger_parser.js $swagger_path $api $method $cmd`;

my @apis = split(/\n/, $result);
foreach my $it (@apis){
      $it =~ /\s(\S+)\s*/;      
      my $_api = $1;

      ## trim /{id}
      $_api =~ s/\/\{id\}$//;

      if(exists($hash{$_api})){
         ##print $it."\n";
         ## skip ignores
      }else{
         print "$it\n";
      }
}


sub abs_glob(){
   my $dir=undef;
   my $os_name=`uname`;
   if( $os_name =~ /^Darwin$/ ){
      $dir=`greadlink -f $0`;
   }else{ 
      $dir=`readlink -f $0`;
   }
    
   $dir=`dirname $dir`;
   $dir=~s/[\t\r\n]+$//;
   return $dir;
}


#####################################
## subroutines
#####################################

sub get_line {
   my $in = shift;
   my $endline;

   my @lines = &get_lines($in);
   foreach (@lines){
      if(/^[\t\n\r\s]+$/){
      }elsif(/^\#/){
      }else{
         $endline = $_;
      }
   }

   $endline =~ s/[\/\r\n]+$//;
   return $endline;
}

sub get_lines {
   my $in = shift;
   if( -e $in){

      my @lines;
      if(-e $in){
         open my $fh, "<", "$in";
           @lines = <$fh>;
         close $fh;
      }
      return @lines;
   }
}

sub get_data {
  my $in = shift;

  if( -e $in){
     my $content;
     local $/; #Enable 'slurp' mode

     open my $fh, "<", "$in";
        $content = <$fh>;
     close $fh;

     $content =~ s/[\r\n\t]+//;

     return $content;
  }

  return $in;
}



