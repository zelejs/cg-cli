#!/usr/bin/env bash
cmd=$1

usage() {
    echo "Usage: jenkins deploy clean m2"
    echo "       jenkins show link <link>"
    echo "       jenkins deploy upload jar <link>"
    echo "       jenkins deploy pull lib <link> <lib>"
    echo "       jenkins deploy pull lib <link> show"
    echo "       jenkins deploy lib <BOOT-INF>"
    exit
}

if [ ! $cmd ];then
   usage
fi

cmd2=$1$2
cmd3=$1$2$3


if [[ $cmd2 == showlink ]];then
    cmd=cmdshowlink

elif [[ $cmd2 == deploylib ]];then
    BOOT_INF=$3
    if [ ! $BOOT_INF ];then
       usage
    fi

    cmd=cmddeploylib

elif [[ $cmd3 == deploycleanm2 ]];then
    cmd=cmddeploycleanm2

elif [[ $cmd3 == deployuploadjar ]];then

    if [ ! -e pom.xml ];then
        echo "pom.xml not exists"
        exit
    fi

    link=$4
    if [ ! $link ];then
       usage
    fi
  
    cmd=cmddeployuploadjar

elif [[ $cmd3 == deploypulllib ]];then
    link=$4
    lib=$5
    if [ ! $lib ];then
       usage
    fi

    if [[ $lib == show ]];then
       cmd=cmddeploypulllibshow
    else
       cmd=cmddeploypulllib   
    fi
else 
    usage
fi


### start ###
dir=$(readlink -f $0)
dir=$(dirname $dir)
PEM=$dir/ssh/use-ci-jenkins-deploy.pem
JAR='/mnt/tools/java/bin/jar'

showlink(){
    link=$1
    echo "ssh -i $PEM ci@zele.pro \"ls /home/ci/link/$link\""
    ssh -i $PEM ci@zele.pro "ls /home/ci/link/$link"
}

## deploy to clean m2
deploycleanm2() {
    POM_CLI="perl -I$dir/local $dir/local/pom-cli"
        groupId=$($POM_CLI get groupId)
        groupId=${groupId/\./\/}
        artifactId=$($POM_CLI get artifactId)
        version=$($POM_CLI get version)
        jar="$artifactId-$version.jar"

    ## start deploy
    if [ ! -e target/$jar ];then
       mvn clean install deploy
    fi
    
    if [ -e target/$jar ];then
        ## echo jar
        echo target/$jar

        echo "check installed $artifactId on jenkins server.."
        lib=$(ssh -i $PEM ci@zele.pro "ls /home/ci/.m2/repository/$groupId | grep $artifactId")
        
        if [ $lib ];then
            echo "rm $artifactId from jenkins server.."
            ssh -i $PEM ci@zele.pro "rm -rf /home/ci/.m2/repository/$groupId/$artifactId"
        else
            echo Not found!
        fi

        echo Done.
    fi
}


deployuploadjar(){
    POM_CLI="perl -I$dir/local $dir/local/pom-cli"
        groupId=$($POM_CLI get groupId)
        groupId=${groupId/\./\/}
        artifactId=$($POM_CLI get artifactId)
        version=$($POM_CLI get version)
        jar="$artifactId-$version.jar"


    if [ ! -e target/$jar ];then
        echo target/$jar not exists
        exit
    fi

    link=$1

    ## find the standalone jar
    #echo "find standalone package on jenkin /home/ci/link/$link .."
    standalone=$(ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && ls *-standalone.jar")
    if [ ! $standalone ];then
        echo "no standalone jar found !"
        exit
    fi
    echo "=>standalone jar: /home/ci/link/$link/$standalone"


    ## check if standalone contains current jar
    echo "=>check if $standalone contains $jar .."
    jarok=$(ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && $JAR tf $standalone | grep $jar")
    if [ ! $jarok ];then
         echo "$standalone does not contains $jar"
         exit
    fi
    echo "$jarok"


    #cp jar to link
    echo "=>scp target/$jar ci@zele.pro:/home/ci/link/$link/$jardir"
    jardir=$(dirname $jarok)
    ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && mkdir -p $jardir"
    scp -i $PEM target/$jar ci@zele.pro:/home/ci/link/$link/$jardir

    ## do jar 0uf
    ##ssh -i $PEM ci@zele.pro "ls /home/ci/link/$link/$jardir"
    echo "=>jar 0uf $standalone $jarok"
    jarroot=${jardir%%\/*}  ## remove all after /
    ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && $JAR 0uf $standalone $jarok && rm -rf $jarroot && ls -l"
    echo 'Done.'
}


deploypulllib(){
    link=$1
    lib=$2

    ## find the standalone jar
    #echo "find standalone package on jenkin /home/ci/link/$link .."
    standalone=$(ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && ls *-standalone.jar")
    if [ ! $standalone ];then
        echo "no standalone jar found !"
        exit
    fi
    echo "=>standalone jar: /home/ci/link/$link/$standalone"

    ## check if standalone contains required lib
    echo "=>check if $standalone contains $lib .."
    libok=$(ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && $JAR tf $standalone | grep $lib")
    if [ ! $libok ];then
         echo "$standalone does not contains $lib"
         exit
    fi
    echo "$libok"

    ## extrude lib from standalone jar
    ##ssh -i $PEM ci@zele.pro "ls /home/ci/link/$link/$jardir"
    echo "=>jar xf $standalone $libok"
    libroot=${libok%%\/*}  ## remove all after /
    ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && $JAR xf $standalone $libok && find $libok"

    #cp jar to link
    echo "=>scp -r ci@zele.pro:/home/ci/link/$link/$libroot ."
    scp -i $PEM -r ci@zele.pro:/home/ci/link/$link/$libroot .
    echo "=>find $libroot"
    find $libroot
}

deploypulllibshow(){
    link=$1

    ## find the standalone jar
    #echo "find standalone package on jenkin /home/ci/link/$link .."
    standalone=$(ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && ls *-standalone.jar")
    if [ ! $standalone ];then
        echo "no standalone jar found !"
        exit
    fi
    echo "=>standalone jar: /home/ci/link/$link/$standalone"
    ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && $JAR tf $standalone | grep BOOT-INF"
}

deploylib(){
    BOOT_INF=$1
    if [ ! $BOOT_INF ];then
        echo $BOOT_INF not exists
        exit
    fi

    ## find standalone 
    standalone=$(ls *-standalone.jar)
    if [ ! $standalone ];then
        echo "no standalone jar found !"
        exit
    fi

    echo "--"
    echo "jar 0uf $standalone $BOOT_INF"
}

## main
if [[ $cmd == cmddeploycleanm2 ]];then
    deploycleanm2
elif [[ $cmd == cmdshowlink ]];then
    link=$3
    showlink $link
elif [[ $cmd == cmddeployuploadjar ]];then
    link=$4
    deployuploadjar $link
elif [[ $cmd == cmddeploypulllib ]];then
    link=$4
    lib=$5
    deploypulllib $link $lib
elif [[ $cmd == cmddeploypulllibshow ]];then
    link=$4
    deploypulllibshow $link

elif [[ $cmd == cmddeploylib ]];then
    BOOT_INF=$3
    deploylib $BOOT_INF

else 
    echo Unknown cmd: $cmd
fi

