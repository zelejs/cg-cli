#!/usr/bin/env bash
cmd=$1

usage() {
    echo "Usage: jenkins clean m2"
    echo "       jenkins show link <link>"
    echo "       jenkins upload jar <link>"
    echo "       jenkins deploy pull lib <link> <lib>"
    echo "       jenkins deploy show lib <link>"
    echo "       jenkins deploy lib <BOOT-INF>"
    exit
}

if [ ! $cmd ];then
   usage
fi

cmd2=$1$2
cmd3=$1$2$3

if [[ $cmd2 == showlink ]];then
    cmd=cmdshowlink

elif [[ $cmd2 == cleanm2 ]];then
    cmd=cmdcleanm2

elif [[ $cmd2 == uploadjar ]];then

    if [ ! -e pom.xml ];then
        echo "pom.xml not exists"
        exit
    fi

    link=$3
    if [ ! $link ];then
       usage
    fi
  
    cmd=cmduploadjar

elif [[ $cmd3 == deploypulllib ]];then
    link=$4
    lib=$5
    if [ ! $lib ];then
       usage
    fi

    cmd=cmddeploypulllib

elif [[ $cmd3 == deployshowlib ]];then
    link=$3
    if [ ! $link ];then
        usage
    fi

    cmd=cmddeployshowlib
    
elif [[ $cmd2 == deploylib ]];then
    cmd=cmddeploylib

else 
    usage
fi


### start ###
dir=$(readlink -f $0)
dir=$(dirname $dir)
PEM=$dir/ssh/use-ci-jenkins-deploy.pem
JAR='/mnt/tools/java/bin/jar'

showlink(){
    link=$1
    echo "ssh -i $PEM ci@zele.pro \"ls /home/ci/link/$link\""
    ssh -i $PEM ci@zele.pro "ls /home/ci/link/$link"
}

## deploy to clean m2
cleanm2() {
    POM_CLI="perl -I$dir/local $dir/local/pom-cli"
        groupId=$($POM_CLI get groupId)
        groupId=${groupId/\./\/}
        artifactId=$($POM_CLI get artifactId)
        version=$($POM_CLI get version)
        jar="$artifactId-$version.jar"
        echo groupId=$groupId, artifactId=$artifactId, version=$version

    ## start deploy
    if [ ! -e target/$jar ];then
       mvn clean install deploy
    fi
    
    if [ -e target/$jar ];then
        ## echo jar
        echo target/$jar

        echo "check installed $artifactId on jenkins server.."
        lib=$(ssh -i $PEM ci@zele.pro "ls /home/ci/.m2/repository/$groupId | grep $artifactId")
        
        if [ $lib ];then
            echo "rm $lib from jenkins server.."
            ssh -i $PEM ci@zele.pro "rm -rf /home/ci/.m2/repository/$groupId/$artifactId"
        else
            echo Not found!
        fi

        echo Done.
    fi
}


uploadjar(){
    POM_CLI="perl -I$dir/local $dir/local/pom-cli"
        groupId=$($POM_CLI get groupId)
        groupId=${groupId/\./\/}
        artifactId=$($POM_CLI get artifactId)
        version=$($POM_CLI get version)
        jar="$artifactId-$version.jar"


    if [ ! -e target/$jar ];then
        echo target/$jar not exists
        exit
    fi

    link=$1

    ## find the standalone jar
    #echo "find standalone package on jenkin /home/ci/link/$link .."
    standalone=$(ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && ls *-standalone.jar")
    if [ ! $standalone ];then
        echo "no standalone jar found !"
        exit
    fi
    echo "=>standalone jar: /home/ci/link/$link/$standalone"


    ## check if standalone contains current jar
    echo "=>check if $standalone contains $jar .."
    jarok=$(ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && $JAR tf $standalone | grep $jar")
    if [ ! $jarok ];then
         echo "$standalone does not contains $jar"
         exit
    fi
    echo "$jarok"


    #cp jar to link
    echo "=>scp target/$jar ci@zele.pro:/home/ci/link/$link/$jardir"
    jardir=$(dirname $jarok)
    ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && mkdir -p $jardir"
    scp -i $PEM target/$jar ci@zele.pro:/home/ci/link/$link/$jardir

    ## do jar 0uf
    ##ssh -i $PEM ci@zele.pro "ls /home/ci/link/$link/$jardir"
    echo "=>jar 0uf $standalone $jarok"
    jarroot=${jardir%%\/*}  ## remove all after /
    ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && $JAR 0uf $standalone $jarok && rm -rf $jarroot && ls -l"
    echo 'Done.'
}


deploypulllib(){
    link=$1
    lib=$2

    ## find the standalone jar
    #echo "find standalone package on jenkin /home/ci/link/$link .."
    standalone=$(ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && ls *-standalone.jar")
    if [ ! $standalone ];then
        echo "no standalone jar found !"
        exit
    fi
    echo "=>standalone jar: /home/ci/link/$link/$standalone"

    ## check if standalone contains required lib
    echo "=>check if $standalone contains $lib .."
    libok=$(ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && $JAR tf $standalone | grep $lib")
    if [ ! $libok ];then
         echo "$standalone does not contains $lib"
         exit
    fi
    echo "$libok"

    ## extrude lib from standalone jar
    ##ssh -i $PEM ci@zele.pro "ls /home/ci/link/$link/$jardir"
    echo "=>jar xf $standalone $libok"
    libroot=${libok%%\/*}  ## remove all after /
    ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && $JAR xf $standalone $libok && find $libok"

    #cp jar to link
    echo "=>scp -r ci@zele.pro:/home/ci/link/$link/$libroot ."
    scp -i $PEM -r ci@zele.pro:/home/ci/link/$link/$libroot .
    echo "=>find $libroot"
    find $libroot
}

deployshowlib(){
    link=$1

    ## find the standalone jar
    #echo "find standalone package on jenkin /home/ci/link/$link .."
    standalone=$(ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && ls *-standalone.jar")
    if [ ! $standalone ];then
        echo "no standalone jar found !"
        exit
    fi
    echo "=>standalone jar: /home/ci/link/$link/$standalone"
    ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && $JAR tf $standalone | grep BOOT-INF"
}

deploylib(){
    ################################
    # export JENKINS_LINK='mall-api'
    # export STANDALONE='mall-api-pack-1.0.0-standalone.jar'
    ################################
    BOOT_INF=$1

    ## just list the BOOT-INF dir if no param input
    if [ ! $BOOT_INF ];then
        if [ -d BOOT-INF ];then
            find BOOT-INF
            exit
        fi
    fi

    ## check args
    if [ ! $BOOT_INF ];then
        echo 'Usage: deploy_lib.sh <BOOT-INF>'
        exit
    fi

    ## check if lib exists
    if [[ $BOOT_INF == BOOT-INF* ]];then
        if [ ! -e $BOOT_INF ];then
            echo $BOOT_INF not exists
            exit
        fi
        if [ -d $BOOT_INF ];then
           echo .jar type of file is required
           find BOOT-INF
           exit
        fi
    else
       echo "$BOOT_INF is not located in BOOT-INF !"
       exit
    fi


    ## find standalone if env STANDALONE is not set
    standalone=${STANDALONE} 
    if [ ! $standalone ];then
        standalone=$(ls *-standalone.jar)
        if [ ! $standalone ];then
            echo "no standalone jar found !"
            exit
        fi
    fi

    ## start pull the lib
    lib=${BOOT_INF//BOOT-INF\/lib/}  ## cut BOOT-INF/lib, only jar
    ## no BOOT-INF dir found, pull it down
    if [ ! -d BOOT-INF ];then
        if [ $lib ];then
            if [ ! ${JENKINS_LINK} ];then
                link=${PWD};link=${link//\/build/};link=$(basename $link)
                echo "export JENKINS_LINK is required !"
                echo "export JENKINS_LINK='$link'"
                exit
            fi
            echo "=>jenkins deploy pull lib ${JENKINS_LINK} $lib"
            jenkins deploy pull lib ${JENKINS_LINK} $lib
        fi
    fi

    ## check if jenkins pull is successful
    if [ ! -e $BOOT_INF ];then
        echo "fail to pull $lib from jenkins !"
        exit
    fi

    #backup rollback $standalone
    echo "cp $standalone $standalone.rollback_$(date "+%m-%d")"
    echo "jar 0uf $standalone $BOOT_INF"
    echo "sh setup.sh"
}

## main
if [[ $cmd == cmdcleanm2 ]];then
    cleanm2
elif [[ $cmd == cmdshowlink ]];then
    link=$3
    showlink $link
elif [[ $cmd == cmduploadjar ]];then
    link=$3
    uploadjar $link
elif [[ $cmd == cmddeploypulllib ]];then
    link=$4
    lib=$5
    deploypulllib $link $lib
elif [[ $cmd == cmddeployshowlib ]];then
    link=$4
    deployshowlib $link
elif [[ $cmd == cmddeploylib ]];then
    BOOT_INF=$3
    deploylib $BOOT_INF
else 
    echo Unknown cmd: $cmd
fi


################################################
##  agent scripts
################################################
deploy_lib() {
    export STANDALONE='mall-api-pack-1.0.0-standalone.jar'
    export JENKINS_LINK='mall-api'

    lib=$1

    ## nothing,no BOOT-INF dir
    if [ ! -d BOOT-INF ];then
        if [ ! $lib ];then
            echo '=>BOOT-INF not exists, first pull the lib ..'
            echo "deploy-cli.sh <lib>"
        else
            echo "=>jenkins deploy pull lib $JENKINS_LINK $lib"
            jenkins deploy pull lib $JENKINS_LINK $lib
        fi
        exit
    fi

    BOOT_INF=$1
    if [ ! $BOOT_INF ];then
        echo 'Usage: deploy-lib.sh <BOOT-INF>'
        exit
    fi

    ## jenkins will check INPUT existance
    jenkins deploy lib $BOOT_INF

    if [ $BOOT_INF ];then
        if [ -d BOOT-INF ];then
            echo '=>Clean BOOT-INF after deploy'
            echo 'rm -rf BOOT-INF'
        fi
    fi
}
