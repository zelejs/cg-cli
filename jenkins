#!/usr/bin/env bash
cmd=$1

usage() {
    echo "Usage: jenkins clean m2"
    echo "       jenkins show link [link]"
    echo "       jenkins wget link <link>"
    echo "       jenkins upload jar <link>"
    echo "       jenkins upload dist <link> <pack>"
    echo "       jenkins show lib <link>"
    echo "       jenkins pull lib <link> <lib>"
    echo "       jenkins export classes <lib> [pattern] [-o]"
    echo "       jenkins deploy lib <BOOT-INF|WEB-INF>"
    echo "       jenkins deploy classes"
    echo "       jenkins deploy class <class> [container]"
    echo "       jenkins find class <jar> <lib> <class>"
    echo "       jenkins local find jar <jar>"
    echo "       jenkins local put jar <link> [jar]"
    exit
}

if [ ! $cmd ];then
   usage
fi

cmd2=$1$2
cmd3=$1$2$3

if [[ $cmd2 == showlink ]];then
    cmd=cmdshowlink

elif [[ $cmd2 == wgetlink ]];then
    cmd=cmdwgetlink

elif [[ $cmd2 == cleanm2 ]];then
    cmd=cmdcleanm2

elif [[ $cmd2 == uploadjar ]];then
    if [ ! -e pom.xml ];then
        echo 'pom.xml not exists'
        exit
    fi

    link=$3
    if [ ! $link ];then
       usage
    fi
  
    cmd=cmduploadjar

elif [[ $cmd2 == uploaddist ]];then
    
    if [ ! -d dist ];then
       echo 'dist not exists'
       exit
    fi

    ## 
    link=$3
    pack=$4

    if [ ! $pack ];then
       usage
    fi
  
    cmd=cmduploaddist

elif [[ $cmd2 == pulllib ]];then
    link=$3
    lib=$4
    if [ ! $lib ];then
       usage
    fi

    cmd=cmdpulllib

elif [[ $cmd2 == exportclasses ]];then
    lib=$3
    
    ## check WEB-INF|BOOT-INF exists
    ok=''
    if [ -d WEB-INF ];then
      ok='WEB-INF'
    elif [ -d BOOT-INF ];then 
      ok='BOOT-INF'
    fi
    if [ ! $ok ];then
      echo 'WEB-INF|BOOT-INF not exist'
      exit
    fi

    if [ ! $lib ];then
        find $ok -name "*.jar"
        exit
    fi

    
    ## check file exist
    if [ ! -f $lib ];then
       echo $lib not exists
       exit
    fi

    cmd=cmdexportclasses

elif [[ $cmd2 == showlib ]];then
    link=$3
    if [ ! $link ];then
        usage
    fi

    cmd=cmdshowlib
    
elif [[ $cmd2 == deploylib ]];then
    cmd=cmddeploylib

elif [[ $cmd2 == deployclasses ]];then
    cmd=cmddeployclasses

elif [[ $cmd2 == deployclass ]];then
    cmd=cmddeployclass

elif [[ $cmd2 == findclass ]];then
    jar=$3
    lib=$4
    class=$5 
    if [ ! $class ];then
        usage
    fi
    cmd=cmdfindclass

elif [[ $cmd3 == localfindjar ]];then
    jar=$4
    if [ ! $jar ];then 
       usage
    fi
    cmd=cmdlocalfindjar
    
elif [[ $cmd3 == localputjar ]];then
    link=$4
    jar=$5
    if [ ! $link ];then 
       usage
    fi

    ## check jar exists
    if [ $jar ];then 
        if [ ! -f $jar ];then 
           echo $jar not exists
           exit
        fi
    fi

    cmd=cmdlocalputjar

 elif [[ $cmd2 == allindeploy ]];then
    cmd=cmdallindeploy

else
    usage
fi


### start ###
dir=$(readlink -f $0)
dir=$(dirname $dir)
PEM=$dir/ssh/use-ci-jenkins-deploy.pem
JAR='/mnt/tools/java/bin/jar'

showlink(){
    link=$1
    #echo "=>ssh -i $PEM ci@zele.pro \"ls /home/ci/link/$link\""
    ssh -i $PEM ci@zele.pro "if [ -d /home/ci/link/$link ];then ls /home/ci/link/$link;else ls /home/ci/link | grep $link;fi"
}

wgetlink(){
    link=$1
    result=$(ssh -i $PEM ci@zele.pro "if [ -d /home/ci/link/$link ];then cd /home/ci/link/$link;ls *.zip;fi")
    if [ ! $result ];then 
       result=$(ssh -i $PEM ci@zele.pro "if [ -d /home/ci/link/$link ];then cd /home/ci/link/$link;ls *.jar;fi")
    fi
    if [ ! $result ];then 
       result=$(ssh -i $PEM ci@zele.pro "if [ -d /home/ci/link/$link ];then cd /home/ci/link/$link;ls *.tar*;fi")
    fi
    ## get how many libs
    i=0
    for it in $result;do
        i=$(($i+1))
    done
    ## if no match
    if [ $i -eq 0 ];then
        echo no link package found !
        exit
    elif [ $i -gt 1 ];then
       for it in $result;do
           echo $it
       done
       exit
    fi
        
    ## only wget 
    echo "=>curl -O http://120.79.49.72:8000/link/$link/$result"
    curl -O http://120.79.49.72:8000/link/$link/$result
}

## deploy to clean m2
cleanm2() {
    POM_CLI="perl -I$dir/local $dir/local/pom-cli"
        groupId=$($POM_CLI get groupId)
        groupId=${groupId/\./\/}
        artifactId=$($POM_CLI get artifactId)
        version=$($POM_CLI get version)
        jar="$artifactId-$version.jar"
        echo groupId=$groupId, artifactId=$artifactId, version=$version

    ## start deploy
    if [ ! -e target/$jar ];then
       mvn clean install deploy
    fi
    
    if [ -e target/$jar ];then
        ## echo jar
        echo target/$jar

        echo "check installed $artifactId on jenkins server.."
        lib=$(ssh -i $PEM ci@zele.pro "ls /home/ci/.m2/repository/$groupId | grep $artifactId")
        
        if [ $lib ];then
            echo "rm $lib from jenkins server.."
            ssh -i $PEM ci@zele.pro "rm -rf /home/ci/.m2/repository/$groupId/$artifactId"
        else
            echo Not found!
        fi

        echo Done.
    fi
}


uploadjar(){
    POM_CLI="perl -I$dir/local $dir/local/pom-cli"
        groupId=$($POM_CLI get groupId)
        groupId=${groupId/\./\/}
        artifactId=$($POM_CLI get artifactId)
        version=$($POM_CLI get version)

    if [ $artifactId -a $version ];then    
        jar="$artifactId-$version.jar"
    fi

    ## no jar found, search local
    if [ ! -f target/$jar ];then 
        libs=$(find target -name "*.jar")
        
        ## get how many libs
        i=0
        for lib in $libs;do
            i=$(($i+1))
            echo $lib
        done

        ## if no match
        if [ $i -eq 0 ];then
            echo no libs found !
            exit
        fi

        ## if more than 1
        if [ $i -gt 1 ];then
            for it in $libs;do
                if [[ $it == *-standalone.jar ]];then
                    continue
                fi
                jar=$it
            done
        else
            ## equal 1
            jar=$(basename $libs)
        fi
    fi ## end if [ ! -f target/$jar ];then 

    ## verify jar again
    if [ ! -e target/$jar ];then
        echo target/$jar not exists
        exit
    fi


    ## upload to link
    link=$1

    ## find the standalone jar
    #echo "find standalone package on jenkin /home/ci/link/$link .."
    standalone=$(ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && ls *-standalone.jar")
    if [ ! $standalone ];then
        echo "no standalone jar found !"
        exit
    fi
    echo "=>standalone jar: /home/ci/link/$link/$standalone"


    ## check if standalone contains current jar
    echo "=>check if $standalone contains $jar .."
    jarok=$(ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && $JAR tf $standalone | grep $jar")
    if [ ! $jarok ];then
         echo "$standalone does not contains $jar"
         exit
    fi
    echo "$jarok"


    #cp jar to link
    echo "=>scp target/$jar ci@zele.pro:/home/ci/link/$link/$jardir"
    jardir=$(dirname $jarok)
    ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && mkdir -p $jardir"
    scp -i $PEM target/$jar ci@zele.pro:/home/ci/link/$link/$jardir

    ## do jar 0uf
    ##ssh -i $PEM ci@zele.pro "ls /home/ci/link/$link/$jardir"
    echo "=>jar 0uf $standalone $jarok"
    ## jarroot=${jardir%%\/*}  ## get ONLY the BOOT-INF
    jarroot='BOOT-INF';
    echo $jarok
    ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && $JAR 0uf $standalone $jarok && rm -rf $jarroot && ls -l"
    echo 'Done.'
}


uploaddist(){
    ## upload to link
    link=$1
    pack=$2

    ## check index.html location
    if [ -f dist/static/index.html ];then 
       mv dist/static/index.html dist/index.html
    fi

    PACK=''
    if [[ $pack == *.zip ]];then 
       PACK="zip $pack -r dist"
    elif [[ $pack == *.tar ]];then
       PACK="tar cvf $pack dist"
    elif [[ $pack == *.tar.gz ]];then
       PACK="tar zcvf $pack dist"
    fi

    ## remove dist
    echo "=>ssh -i $PEM ci@zele.pro \"cd /home/ci/link/$link && rm -rf dist\""
    ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && rm -rf dist"
    ## scp dist
    echo "=>scp -r dist ci@zele.pro:/home/ci/link/$link"
    scp -i $PEM -r dist ci@zele.pro:/home/ci/link/$link
    ## zip dist
    echo "=>cd /home/ci/link/$link && rm -rf dist && $PACK && ls -l"
    ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && $PACK && ls -l"
    echo 'Done.'
}


pulllib(){
    link=$1
    lib=$2
    links='/home/ci/link'

    ## find the standalone jar
    #echo "find standalone package on jenkin /home/ci/link/$link .."
    libs=$(ssh -i $PEM ci@zele.pro "cd $links/$link && ls *-standalone.jar *.war")
    if [ ! $libs ];then
        echo "no standalone jar found !"
        exit
    fi
    ## get how many libs
    i=0
    for it in $libs;do
        i=$(($i+1))
    done
    ## if no match
    if [ $i -eq 0 ];then
        echo no libs found !
        exit
    fi
    ## if more than 1
    if [ $i -gt 1 ];then
        for it in $libs;do
            echo $links/$link/$it
        done
        exit
    fi
    standalone=$libs
    echo "$links/$standalone"

    ## check if standalone contains required lib
    echo "=>check if $standalone contains $lib"
    if [[ $standalone == *.war ]];then
       libok=$(ssh -i $PEM ci@zele.pro "cd $links/$link && $JAR tf $standalone | grep WEB-INF/lib | grep $lib")
    else 
       libok=$(ssh -i $PEM ci@zele.pro "cd $links/$link && $JAR tf $standalone | grep BOOT-INF/lib | grep $lib")
    fi
    ## get how many items
    i=0
    for it in $libok;do
        i=$(($i+1))
    done
    ## if no match
    if [ $i -eq 0 ];then
        echo "$standalone does not contains $lib !"
        exit
    fi
    ## if more than 1
    if [ $i -gt 1 ];then
        for it in $libok;do
            echo $it
        done
        exit
    fi
    echo "$libok"

    ## extrude lib from standalone jar
    ##ssh -i $PEM ci@zele.pro "ls /home/ci/link/$link/$jardir"
    echo "=>jar xf $standalone $libok"
    libroot=${libok%%\/*}  ## remove all after /
    ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && $JAR xf $standalone $libok && find $libok"

    #cp jar to link
    echo "=>scp -r ci@zele.pro:/home/ci/link/$link/$libroot ."
    scp -i $PEM -r ci@zele.pro:/home/ci/link/$link/$libroot .
    echo "=>find $libroot"
    find $libroot
    echo "=>clean remote BOOT-INF/WEB-INF"
    #echo "=>ssh ci@zele.pro \"cd /home/ci/link/$link && rm -rf $libroot\""
    ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && rm -rf $libroot"  
    echo Done.
}

exportclasses(){
    lib=$1
    pattern=$2
    out=$3

    if [[ $lib == BOOT-INF* ]];then  
       LIB_INF='BOOT-INF'
    elif [[ $lib == WEB-INF* ]];then
       LIB_INF='WEB-INF'
    fi
    
    if [ ! -d $LIB_INF/classes ];then
       mkdir $LIB_INF/classes
    fi
    cd $LIB_INF/classes 

    ## remove LIB_INF
    lib=${lib//$LIB_INF\//}
    lib="../$lib"

    if [ $pattern ];then
       classes=$(jar tf $lib | grep class | grep $pattern)
    else
       classes=$(jar tf $lib | grep class)
    fi

    for cls in $classes;do
        echo $LIB_INF/classes/$cls
        if [[ $out == '-o' ]];then
           jar xf $lib $cls
        fi
    done
}

showlib(){
    link=$1
    links='/home/ci/link'

    ## find the standalone jar
    #echo "find standalone package on jenkin /home/ci/link/$link .."
    libs=$(ssh -i $PEM ci@zele.pro "cd $links/$link && ls *.jar *.war")
    ## get how many class
    i=0
    for lib in $libs;do
        i=$(($i+1))
    done
    ## if no match
    if [ $i -eq 0 ];then
        echo no libs found !
        exit
    fi
    ## if more than 1
    if [ $i -gt 1 ];then
        for lib in $libs;do
            echo $links/$lib
        done
        exit
    fi
    standalone=$libs

    if [ ! $standalone ];then
        echo "no standalone jar found !"
        exit
    fi
    echo "=>standalone jar: /home/ci/link/$link/$standalone"
    ssh -i $PEM ci@zele.pro "cd /home/ci/link/$link && $JAR tf $standalone | grep BOOT-INF"
}

deploylib(){
    ################################
    # export JENKINS_LINK='mall-api'
    # export STANDALONE='mall-api-pack-1.0.0-standalone.jar'
    ################################
    if [ ! ${JENKINS_LINK} ];then
        echo 'env JENKINS_LINK is not exported !'
        echo "e.g. export JENKINS_LINK='mall-api'"
        exit
    fi
    if [ ! ${STANDALONE} ];then
        echo 'env STANDALONE is not exported !'
        echo "e.g. export STANDALONE='mall-api-pack-1.0.0-standalone.jar'"
        exit
    fi
    lib=$1

    if [[ ${STANDALONE} == *.war ]];then
       LIB_INF='WEB-INF'
    else
       LIB_INF='BOOT-INF'
    fi

    ## no BOOT-INF/WEB-INF, pull first and get the BOOT-INF/WEB-INF
    if [ ! -d $LIB_INF ];then
        if [ ! $lib ];then
            echo "=>$LIB_INF not exists, first pull the lib !"
            echo "deploy-cli.sh <lib>"
        else
            echo "=>jenkins pull lib $JENKINS_LINK $lib"
            pulllib $JENKINS_LINK $lib
            find $LIB_INF
        fi

        ## to end anyway
        exit
    fi

    ## if BOOT-INF/WEB-INF exists, handle the lib
    ## just list the BOOT-INF dir if no param input
    if [ ! $lib ];then
        if [ -d $LIB_INF ];then
            find $LIB_INF -name "*.jar"
            exit
        fi
    fi

    ## check args
    if [ ! $lib ];then
        echo 'Usage: deploy_lib.sh <BOOT-INF|WEB-INF>'
        exit
    fi
   
    ## check if lib exists
    if [[ $lib == $LIB_INF* ]];then
        if [ ! -e $lib ];then
            echo $lib not exists
            exit
        fi
        if [ -d $lib ];then
           echo .jar type of file is required
           find $LIB_INF
           exit
        fi
        ## the end, must be the .jar file
        libok=$lib
    else
       echo "$lib is not located in $LIB_INF !"
       exit
    fi

    ## find standalone if env STANDALONE is not set
    standalone=${STANDALONE} 
    if [ ! $standalone ];then
        standalone=$(ls *-standalone.jar)
        if [ ! $standalone ];then
            echo "no standalone jar found !"
            exit
        fi
    fi

    ## start pull the lib
    libjar=${libok//$LIB_INF\/lib\//}  ## cut BOOT-INF/lib, only jar

    ## no BOOT-INF/WEB-INF dir found, pull it down
    if [ ! -d $LIB_INF ];then
        if [ $lib ];then
            if [ ! ${JENKINS_LINK} ];then
                link=${PWD};link=${link//\/build/};link=$(basename $link)
                echo "export JENKINS_LINK is required !"
                echo "export JENKINS_LINK='$link'"
                exit
            fi
            echo "=>jenkins pull lib ${JENKINS_LINK} $libjar"
            jenkins pull lib ${JENKINS_LINK} $libjar
        fi
    fi

    ## check if jenkins pull is successful
    if [ ! -e $LIB_INF ];then
        echo "fail to pull $libjar from jenkins !"
        exit
    fi

    #backup rollback $standalone
    rollback=$standalone.rollback_$(date "+%m-%d")
    if [ ! -f $rollback ];then
       echo "cp $standalone $rollback"
    fi
    war_fix=$(basename $standalone).fix_$(date "+%m-%d")
    if [ ! -f $war_fix ];then
       echo "cp $standalone $war_fix"
    fi
    echo '--------------------------------------------'
    echo "jar 0uf $war_fix $libok && rm -rf $LIB_INF"
    echo '--------------------------------------------'
    echo "mv $war_fix $standalone"
    echo "sh setup.sh"
}


deployclasses(){
    ################################
    # export STANDALONE='mall-api-pack-1.0.0-standalone.jar'
    ################################
    if [ ! ${STANDALONE} ];then
        echo 'env STANDALONE is not exported !'
        echo "e.g. export STANDALONE='mall-api-pack-1.0.0-standalone.jar'"
        exit
    fi

    if [ ! -f ${STANDALONE} ];then
       echo ${STANDALONE} not exists
       exit
    fi
    standalone=${STANDALONE}

    if [[ ${STANDALONE} == *.war ]];then
       LIB_INF='WEB-INF'
    else
       LIB_INF='BOOT-INF'
    fi

    ## no BOOT-INF/WEB-INF, pull first and get the BOOT-INF/WEB-INF
    if [ ! -d $LIB_INF ];then
        echo "=>$LIB_INF not exists, first provide the classes !"
        exit
    fi

    #cd $LIB_INF/classes
    classes=$(find $LIB_INF -name "*.class")
    cc=''
    for cls in $classes;do
      cls=${cls//\.\//}
      cc="$cc $cls"
    done

    #backup rollback $standalone
    echo "cp $standalone $standalone.rollback_$(date "+%m-%d")"
    war_fix=$(basename $standalone).fix_$(date "+%m-%d")
    echo "cp $standalone $war_fix"
    echo ===========================================
    echo "jar 0uf $war_fix $cc"
    echo ===========================================
    echo "mv $war_fix $standalone"
    echo "rm -rf $LIB_INF"
    echo "sh setup.sh"
}


findclass() {
   jar=$1
   lib=$2
   class=$3

   if [ ! -f $jar ];then
      echo $jar not exists
      exit
   fi

   libok=$(jar tf $jar | grep $lib)
   ## get how many class
   i=0
   for lib in $libok;do
      i=$(($i+1))
   done
   ## if no match
   if [ $i -eq 0 ];then
       echo no match lib found !
       exit
   fi
   ## if more thean 1
   if [ $i -gt 1 ];then
       for lib in $libok;do
           echo $lib
       done
       exit
   fi

   ## show libok
   echo $libok

   ## find class
   echo "=>jar xf $jar $libok"
   jar xf $jar $libok
   
   #echo "classok=\$(jar tf $libok | grep $class)"
   classok=$(jar tf $libok | grep $class)
   ## get how many class
   i=0
   for cls in $classok;do
      i=$(($i+1))
   done
   ## if no match
   if [ $i -eq 0 ];then
       echo no match class found !
       exit
   fi
   ## if more than 1
   if [ $i -gt 1 ];then
       for cls in $classok;do
           echo $cls
       done
       exit
   fi
 
   jar xf $libok $classok
   ls $classok
   classok=${classok//\//.} ## replace / with .
   classok=${classok//\.class/}
   
   echo ''
   echo ACTION
   echo --
   echo "jad --source-only $classok"

}

deployclass() {
    class=$1
    container=$2

    if [ ! -d BOOT-INF ];then
       echo BOOT-INF not exists
       exit
    fi

    ## find the lib
    libok=$(find BOOT-INF -name "*.jar")
    if [ ! $libok ];then
        echo no deploy lib found !
        exit 
    fi

    classok=$(jar tf $libok | grep -i $class)

    ## get how many class
    i=0
    for cls in $classok;do
       i=$(($i+1))
    done
    ## if no match
    if [ $i -eq 0 ];then
        echo no match class found !
        exit
    fi
    ## if more than 1
    if [ $i -gt 1 ];then
        for cls in $classok;do
            echo $cls
        done
        exit
    fi
    
    if [ ! -f $classok ];then
       echo "=>jar xf $libok $classok"
       jar xf $libok $classok
    fi

    if [ -f $classok ];then
       echo "=>ls $classok"
       ls $classok
    fi

    ## cp to docker 
    if [ $container ];then
       echo "=>docker cp $classok $container:/"
       docker cp $classok $container:/
       echo "=>rm -rf BOOT_INF && rm -f $classok"
       rm -rf BOOT_INF && rm -f $classok
       
       ## steps
       echo ''
       echo ACTION
       echo --
       echo "docker exec -it $container bash"
       echo 'java -jar arthas-boot.jar'
       echo "redefine /$(basename $classok)"
    fi
}

localfindjar() {
   link=$1
   links='/home/ci/.jenkins/workspace'
   
   ## not exists, just search in workspace
   if [ ! -e $link ];then
      jarok=$(ls /home/ci/.jenkins/workspace | grep $link)
   elif [ -d $link ];then
      ## if exists, and is directory, find itself
      jarok=$(find $link -name "*.jar") 
   elif [ -f $link ];then
      ## is file already, end
      ls $link
      exit    
   fi 

   ## check if ok
   i=0
   for jr in $jarok;do
      i=$(($i+1))
   done
   ## if no match
   if [ $i -eq 0 ];then
       echo no match class found !
       exit
   fi
   ## if more than 1
   if [ $i -gt 1 ];then
       for jr in $jarok;do
           echo $links/$jr
       done
       exit
   fi

   ## check if already found
   if [ -f $jarok ];then
      ls $jarok
      exit
   fi
   
   ## got link
   jarlink=$jarok

   #continue to search
   if [ ! -d $links/$jarok ];then
      jar=$(basename $jar)
      jarok=$(ls /home/ci/.jenkins/workspace/$jarlink/target | grep $jar)
   fi

   i=0
   for jr in $jarok;do
      i=$(($i+1))
   done
   ## if no match
   if [ $i -eq 0 ];then
       echo no match class found !
       exit
   fi
   ## if more than 1
   if [ $i -gt 1 ];then
       for jr in $jarok;do
           echo $jarlink/target/$jr
       done
       exit
   fi

   ## if exitst
   if [ -d $links/$jarok ];then
       cd $links
       jarok=$(ls $jarok/target/*.jar)  
   fi

   i=0
   for jr in $jarok;do
      i=$(($i+1))
   done
   ## if no match
   if [ $i -eq 0 ];then
       echo no match class found !
       exit
   fi
   ## if more than 1
   if [ $i -gt 1 ];then
       for jr in $jarok;do
           echo $jarlink/target/$jr
       done
       exit
   fi

   #found the jar
   echo $jarok
}


localputjar() {
    link=$1
    jar=$2

    ## not jar specified, find local
    if [ ! $jar ];then 
        result=$(find target/*.jar)
        ## check result
        i=0
        for it in $result;do
            i=$(($i+1))
        done
        if [ $i -eq 1 ];then
            jar=$result
        elif [ $i -gt 1 ];then
            ## if more than 1
            for it in $result;do
                echo $it
            done
            exit
        fi

        ## if no match
        if [ $i -eq 0 ];then
            result=$(ls *.jar)
            ## check result
            i=0
            for it in $result;do
                i=$(($i+1))
            done
            if [ $i -eq 1 ];then
                jar=$result
            elif [ $i -gt 1 ];then
                ## if more than 1
                for it in $result;do
                    echo $it
                done
                exit
            fi
        fi
    fi

    localdir='/home/ci/.jenkins/workspace'

    if [ -f ${PWD}/$jar ];then
        jar=$(readlink -f ${PWD}/$jar)
    fi
    
    if [ ! -f $jar ];then
       if [ ! -f  $localdir/$jar ];then
          echo $jar not exists in $localdir
          exit
       fi
    fi

    ## find the standalone jar
    #echo "find standalone package on jenkin /home/ci/link/$link"
    standalone=$(cd /home/ci/link/$link && ls *-standalone.jar)
    if [ ! $standalone ];then
        standalone=$(cd /home/ci/link/$link && ls *.war)
    fi
    if [ ! $standalone ];then
        echo "no standalone jar found !"
        exit
    fi
    echo "=>standalone jar: /home/ci/link/$link/$standalone"

    ## check if standalone contains current jar
    jarlib=$(basename $jar)
    echo "=>check if $standalone contains $jar"
    jarok=$(cd /home/ci/link/$link && $JAR tf $standalone | grep $jarlib)
    if [ ! $jarok ];then
         echo "$standalone does not contains $jarlib"
         exit
    fi
    echo "$jarok"

    ## do jar 0uf
    jardir=$(dirname $jarok)
    jarroot=${jardir%%\/*}  ## get ONLY the BOOT-INT
    echo "=>cd /home/ci/link/$link && mkdir -p $jardir"
    cd /home/ci/link/$link && mkdir -p $jardir
    echo "=>PWD"
    echo ${PWD}
    if [ ! -f $jar ];then
       jar=$links/$jar 
    fi
    echo "=>cp $jar $jardir"
    cp $jar $jardir
    find $jardir
    echo "=>jar 0uf $standalone $jarok"
    $JAR 0uf $standalone $jarok
    rm -rf $jarroot && ls -l
    echo 'Done.'
}

## main
if [[ $cmd == cmdcleanm2 ]];then
    cleanm2
elif [[ $cmd == cmdshowlink ]];then
    link=$3
    showlink $link
elif [[ $cmd == cmdwgetlink ]];then
    link=$3
    if [ ! $link ];then 
       usage
    fi
    wgetlink $link
elif [[ $cmd == cmduploadjar ]];then
    link=$3
    uploadjar $link
elif [[ $cmd == cmduploaddist ]];then
    link=$3
    pack=$4
    uploaddist $link $pack
elif [[ $cmd == cmdpulllib ]];then
    link=$3
    lib=$4
    pulllib $link $lib
elif [[ $cmd == cmdexportclasses ]];then
    lib=$3
    pattern=$4
    out=$5
    if [[ $pattern == '-o' ]];then
       out='-o'
       pattern='' 
    fi
    exportclasses $lib $pattern $out
elif [[ $cmd == cmdshowlib ]];then
    link=$3
    showlib $link
elif [[ $cmd == cmddeploylib ]];then
    BOOT_INF=$3
    deploylib $BOOT_INF
elif [[ $cmd == cmddeployclasses ]];then
    deployclasses
elif [[ $cmd == cmddeployclass ]];then
    CLASS=$3
    CONTAINER=$4
    deployclass $CLASS $CONTAINER
elif [[ $cmd == cmdfindclass ]];then
    jar=$3
    lib=$4
    class=$5
    findclass $jar $lib $class
elif [[ $cmd == cmdlocalfindjar ]];then
    jar=$4
    localfindjar $jar
elif [[ $cmd == cmdlocalputjar ]];then
    link=$4
    jar=$5
    localputjar $link $jar
else 
    echo Unknown cmd: $cmd
fi
