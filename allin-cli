#!/usr/bin/env bash
cmd=$1

usage() {
    echo "Usage: allin-cli deploy <package> <user@host> <name> [OPTIONS]"
    echo "       allin-cli gen url <db> [127.0.0.1] [3306] [root] [root]"
    echo "       allin-cli docker restart <user@host> <name>"
    echo "       allin-cli docker stop <user@host> <name>"
    echo "       allin-cli docker rm <user@host> <name>"
    echo "  OPTIONS"
    echo "      --binding   binding port, DEFAUTL [8000] for web, and [8080] for api"
    echo "      --data-url  mysql db url, DEFAULT [jdbc:mysql://127.0.0.1/test?user=root&password=root&characterEncoding=utf8"]
    echo "                  short input [127.0.0.1/db]"
    echo "      --endpoint  api endpoint only for web, DEFAULT [127.0.0.1:8080] "
    echo "      --token     access token only for web, --token . means gen token auto"
    echo "  TIPS"
    echo "      e.g. allin-cli deploy . craftperson@127.0.0.1 docker_name --token . --data-url 127.0.0.1/db"
    exit
}

if [ ! $cmd ];then
   usage
fi

cmd2=$1$2

if [[ $cmd == deploy ]];then
   cmd=cmddeploy

   if [ ! $4 ];then 
      usage
   fi
elif [[ $cmd2 == dockerrestart ]];then   
    name=$3
    if [ ! $name ];then  
        usage
    fi
    cmd=cmddockerrestart
elif [[ $cmd2 == dockerstop ]];then   
    name=$3
    if [ ! $name ];then  
        usage
    fi
    cmd=cmddockerstop
elif [[ $cmd2 == dockerrm ]];then   
    name=$3
    if [ ! $name ];then  
        usage
    fi
    cmd=cmddockerrm  
elif [[ $cmd2 == genurl ]];then   
    db=$3
    if [ ! $db ];then  
        usage
    fi
    cmd=cmdgenurl
else
    usage
fi

### start ###
#dir=$(readlink -f $0)
#dir=$(dirname $dir)
#PEM=$dir/ssh/use-ci-jenkins-deploy.pem

deployweb(){
    package=$1
    ssh=$2
    name=$3
    binding=$4
    endpoint=$5
    token=$6
    perms=$7

    ## make sure args ok
    echo $package, $ssh, $name, $binding, $endpoint

    ## ready for the path
    echo "=>ssh $ssh \"mkdir -p ~/$name/web\""
    ssh $ssh "if [ ! -d ~/$name/web ];then mkdir -p  ~/$name/web; elif [ -d ~/$name/web/dist ];then rm -rf ~/$name/web/dist; fi"
    
    ## cp dist to ssh
    if [[ $package == dist ]];then
      ## only when endpoint or token is provided
      if [ $token ];then
         echo "window.MC={}" > dist/config.js
         echo "window.MC.HOST='$endpoint'" >> dist/config.js
         echo "window.MC.ACCESS_TOKEN='$token'" >> dist/config.js
         echo "window.MC.PERMISSIONS='$perms'" >> dist/config.js
         cat dist/config.js
      fi

      echo "=>tar zcvf dist.tar.gz dist"
      tar zcvf dist.tar.gz dist
      echo "=>scp dist.tar.gz $ssh:~/$name/web"
      scp dist.tar.gz $ssh:~/$name/web
      echo "=>ssh $ssh \"cd ~/$name/web && if [ -f dist/config.js ];then cp dist/config.js .;fi && tar zxvf dist.tar.gz && rm dist.tar.gz && if [ ! -f dist/config.js ];then mv config.js dist/config.js;fi\""
      ssh $ssh "cd ~/$name/web && if [ -f dist/config.js ];then cp dist/config.js .;fi && tar zxvf dist.tar.gz && rm dist.tar.gz && if [ ! -f dist/config.js ];then mv config.js dist/config.js;fi"
      echo "=>ssh $ssh \"cd ~/$name/web && if [ -f dist/config.js ];then cp dist/config.js .;fi && tar zxvf dist.tar.gz && rm dist.tar.gz && if [ ! -f dist/config.js ];then mv config.js dist/config.js;fi\""
    fi

    ## run docker if no docker $name
    ## run remote script
    ALLIN=allin.deploy
    ALLIN_BIN=$(readlink -f $0)
    ALLIN_BIN=$(dirname $ALLIN_BIN)
    ALLIN_BIN="$ALLIN_BIN/ssh/$ALLIN"
    echo "=>scp $ALLIN_BIN $ssh:~/$name"
    scp $ALLIN_BIN $ssh:~/$name
    echo "=>bash ~/$name/$ALLIN $package $name $binding && rm ~/$name/$ALLIN"
    ssh $ssh "bash ~/$name/$ALLIN $package $name $binding && rm ~/$name/$ALLIN"
}

deployapi(){
   standalone=$1
   ssh=$2
   name=$3
   binding=$4
   data=$5

   ## & from \&

   #  if [ $data ];then
   #    data=${data//\&/\\\&}
   #  fi

    ## check binding 
    if [ "$binding"x == "0"x ];then
        binding='8080'
    fi

    ## make sure args ok
    echo $standalone, $ssh, $name, $binding, $data

    ## cp dist/target/*.jar to ssh
    ## ready for the path
    echo "=>ssh $ssh \"mkdir -p ~/$name/api\""
    ssh $ssh "if [ ! -d ~/$name/api ];then mkdir -p  ~/$name/api; fi"

    ## cp dist to ssh
    if [[ $standalone == target/*-standalone.jar ]];then
      echo "=>scp $standalone $ssh:~/$name/api"
      scp $standalone $ssh:~/$name/api
    elif [[ $standalone == http://*.jar ]];then
      echo $standalone
    fi

    ## run remote script
    ALLIN=allin.deploy
    ALLIN_BIN=$(readlink -f $0)
    ALLIN_BIN=$(dirname $ALLIN_BIN)
    ALLIN_BIN="$ALLIN_BIN/ssh/$ALLIN"
    echo "=>scp $ALLIN_BIN $ssh:~/$name"
    scp $ALLIN_BIN $ssh:~/$name
    #echo "=>bash ~/$name/$ALLIN $standalone $name $binding $data && rm ~/$name/$ALLIN"
    #ssh $ssh "bash ~/$name/$ALLIN $standalone $name $binding $data && rm ~/$name/$ALLIN"
    echo "=>bash ~/$name/$ALLIN $standalone $name $binding $data"
    ssh $ssh "bash ~/$name/$ALLIN $standalone $name $binding $data"
}

dockerrestart() {
   ssh=$1
   name=$2
   ssh $ssh "docker restart $name"
}

dockerstop() {
   ssh=$1
   name=$2
   ssh $ssh "docker stop $name"
}

dockerrm() {
   ssh=$1
   name=$2
   ssh $ssh "docker rm $name"
}

genurl(){
   db=$1
   host=$2
   port=$3
   user=$4
   password=$5

   ## port
   if [ "$port"x == "3306"x ];then
      port=''
   else
      port=":$port"
   fi

   url="jdbc:mysql://$host$port/$db?user=$user\&password=$password\&autoReconnect=true\&characterEncoding=utf8\&allowMultiQueries=true"
   echo $url
}


## main
if [[ $cmd == cmddeploy ]];then
   package=$2
   ssh=$3
   name=$4
      
   if [[ $ssh == --* ]];then
      usage
   fi
   if [[ $name == --* ]];then
      usage
   fi
    
   ## pre-filter
   if [[ $package == . ]];then
      if [ -d dist ];then
         package=dist
      elif [ -d target ];then 
         package=target
      fi
   fi
   
   ## find package
   if [[ $package == dist ]];then
      if [ ! -d dist ];then
         echo dist not exist !
         exit
      fi
   elif [[ $package == target/*.jar ]];then
      if [ ! -f $package ];then
         echo $package not exist !
         exit
      fi
   elif [[ $package == target ]];then
       ## find standalone 
       standalone=$(find target -name "*-standalone.jar")
       if [ ! $standalone ];then
          echo 'target does not contain any *-standalone.jar !'
          exit
       fi
       package=$standalone
   else
      echo "invalid package: $package !"
      exit
   fi

   ## check web or api 
   if [[ $package == dist || $package == *.tar.gz || $package == *.tar || $package == *.zip ]];then
      cmd=cmddeployweb
   elif [[ $package == *.jar ]];then
      cmd=cmddeployapi
   else  
      echo "invalid package: $package"
      exit
   fi


    it=''
    for arg in $@;do
         if [ "$arg"x == "--ssh"x ];then
           it=$arg
         elif [ "$arg"x == "--name"x ];then
           it=$arg
         elif [ "$arg"x == "--binding"x ];then
           it=$arg
         elif [ "$arg"x == "--endpoint"x ];then
           it=$arg
         elif [ "$arg"x == "--token"x ];then
           it=$arg  
         elif [ "$arg"x == "--data-url"x ];then
           it=$arg
        fi

         ## get the arg
         if [ "$it"x == "--ssh"x ];then
            ssh=$arg
         elif [ "$it"x == "--name"x ];then
           name=$arg
         elif [ "$it"x == "--binding"x ];then
           binding=$arg
         elif [ "$it"x == "--endpoint"x ];then
           endpoint=$arg
         elif [ "$it"x == "--token"x ];then
           token=$arg
         elif [ "$it"x == "--data-url"x ];then
           data=$arg
        fi
    done

    if [ ! $ssh ];then
       echo "--ssh [user@host] not being provided !"
       exit
    fi

    if [ ! $name ];then
       echo "--name [name] not being provided !"
       exit
    fi

    if [[ ! $ssh == *\@* ]];then
       ssh="$ssh@127.0.0.1"
    fi

    ## handle data
    if [[ $data == jdbc:* ]];then
       data=$data
    elif [[ $data == [0-9.a-z]*/* ]];then
       data_name=${data#*/}  ## remove all before /
       data_host=${data%/*}  ## remove all after /
       data=$(genurl $data_name $data_host '3306' 'root' 'root')
    fi

    ## for web
    if [[ $cmd == cmddeployweb ]];then
        ## check endpoint
         if [ ! $endpoint ];then 
            endpoint='http://127.0.0.1:8080'
         fi
         if [ $endpoint == http://* ];then 
            endpoint=$endpoint
         else
            endpoint="http://$endpoint"
         fi

         ## check binding
         if [ ! $binding ];then
            binding='8000'
         elif [[ $binding == 0 ]];then
            binding='8000'
         fi

         ## get token 
         if [[ $token == . ]];then
            if [ ! $data ];then 
               echo --data-url is not set
               exit
            fi

            ## auto generate
            localurl=${data//\\\&/\&}
            token=$(cg-cli db gen token $localurl admin)
            perms=$(cg-cli db gen perms $localurl admin)
         fi

         ## deploy web 
         deployweb $package $ssh $name $binding $endpoint $token $perms
    fi

    ## for api
    if [[ $cmd == cmddeployapi ]];then
         ## check binding
         if [ ! $binding ];then
            binding='8080'
         elif [[ $binding == 0 ]];then
            binding='8080'
         fi
         
        deployapi $package $ssh $name $binding $data
    fi
elif [[ $cmd == cmddockerrestart ]];then
   ssh=$3
   name=$4
   if [[ ! $ssh == *\@* ]];then
      ssh="$ssh@127.0.0.1"
   fi
   dockerrestart $ssh $name
elif [[ $cmd == cmddockerstop ]];then
   ssh=$3
   name=$4
   if [[ ! $ssh == *\@* ]];then
      ssh="$ssh@127.0.0.1"
   fi
   dockerstop $ssh $name
elif [[ $cmd == cmddockerrm ]];then
   ssh=$3
   name=$4
   if [[ ! $ssh == *\@* ]];then
      ssh="$ssh@127.0.0.1"
   fi
   dockerrm $ssh $name
elif [[ $cmd == cmdgenurl ]];then
   db=$3
   host=$4
   port=$5
   user=$6
   password=$7

   if [ ! $host ];then 
        host=127.0.0.1
   fi
   if [ ! $port ];then
      port=3306
   fi
   if [ ! $user ];then
      user=root
   fi
   if [ ! $password ];then
      password=root
   fi

   genurl $db $host $port $user $password

else 
    echo "Unknown cmd: $cmd"
fi
