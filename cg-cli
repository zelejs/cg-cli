#!/usr/bin/env bash
## CONFCLI="perl -I$dir/local $dir/local/conf-cli"
usage() {
  echo "Usage:"
  echo '    cg-cli <OPTIONS> [-h|--help] [--gen] [--module <module>]'
  echo 'eg. cg-cli crud one t_device --gen --module device'
  echo ''
  echo 'PARAMETERS:'
  echo '    --gen      parameter for generating the code effectively'
  echo '    --module   mandatory parameter with --gen for setting the module name at runtime'
  echo ''
  echo " OPTIONS:"
  #echo "    cg-cli module get"
  #echo "    cg-cli module set <module-name> [parent-module]"
  #echo "    cg-cli module set <module-name>"
  echo "    cg-cli db sanity [url]"
  echo "    cg-cli db get url"
  echo "    cg-cli db set url <database> [localhost] [3306] [root] [root]"
  echo "    cg-cli db run sql [/path/to/schema.sql] [param] ..."
  echo "    cg-cli db show tables"
  echo "    cg-cli db show create table <table-name>"
  echo "    cg-cli db gen token <data-url> <user>"
  echo "    cg-cli db gen perms <data-url> <user>"
  echo "    cg-cli crud reset"
  echo "    cg-cli crud one      <master> [...]"
  echo "    cg-cli crud onemany  <master> <slave:mid> [slave:mid1,mid2] [slave:relation::mid:id] [...]"
  #echo "    cg-cli crud manymany <master> <peer> <relation>"
  echo "    cg-cli crud group    <group> [...]"
  echo "    cg-cli crud groupby  <group> <groupBy> <groupId>"
  #echo "    cg-cli crud init table <table-name> [...]"
  #echo "    cg-cli crud xml [/path/to/cruds.xml]"
  echo "    cg-cli test crud one"
  echo "    cg-cli test crud onemany"
  echo "    cg-cli test crud onemany x2"
  #echo "    cg-cli test crud manymany"
  echo "    cg-cli test crud group"
  echo "    cg-cli test crud groupby"
  echo "    cg-cli test crud groupby field"
  #echo "    cg-cli yaml get url"
  #echo "    cg-cli yaml run sql [test]"
  #echo "    cg-cli yaml show create tables"
  #echo "    cg-cli coding sql <.sql> <module>"
  echo "    cg-cli build init table <table-name> [...]"
  echo "    cg-cli build crud xml [/path/to/cruds.xml]"
}
usage_db() {
  echo "Usage:"
  echo "    cg-cli <OPTIONS> [-h|--help] [--gen]"
  echo "    cg-cli db get url"
  echo "    cg-cli db set url <database> [localhost] [3306] [root] [root]"
  echo "    cg-cli db sanity [url]"
  echo "    cg-cli db run sql [/path/to/schema.sql]"
  echo "    cg-cli db show tables"
  echo "    cg-cli db show create table <table-name>"
  echo "    cg-cli db gen token <data-url> <user>"
  echo "    cg-cli db gen perms <data-url> <user>"
}
usage_crud() {
  echo "Usage:"
  echo "    cg-cli <OPTIONS> [-h|--help] [--gen]"
  echo "    cg-cli crud reset"
  echo "    cg-cli crud one      <master> [...]"
  echo "    cg-cli crud onemany  <master> <slave:mid:id> [slave:mid1,mid2] [slave::relation:mid:id] [...]"
  #echo "    cg-cli crud manymany <master> <peer> <relation>"
  echo "    cg-cli crud group    <group> [groupBy] [groupId]"
  echo "    cg-cli crud groupby  <group> <groupBy> <groupId>"
  #echo "    cg-cli crud xml      [/path/to/cruds.xml]"
  #echo "    cg-cli crud init tables <table-name> [...]"
}
usage_test() {
  echo "Usage:"
  echo "    cg-cli <OPTIONS> [-h|--help] [--gen]"
  echo "    cg-cli test crud one"
  echo "    cg-cli test crud onemany"
  echo "    cg-cli test crud onemany x2"
  echo "    cg-cli test crud manymany"
  echo "    cg-cli test crud group"
  echo "    cg-cli test crud groupby"
  echo "    cg-cli test crud groupby field"
}

## start
cmd=$1
op_gen=$7    ## null 
op_module=$8 ## null
cg_module=$9
if [ ! $cmd ];then
   usage
   exit
fi
for p in $@;do
   if [ "$p"x == "-h"x -o "$p"x == "--help"x ];then
      usage
      exit
   fi

   ## get gen option
   if [ "$p"x == "--gen"x ];then
      op_gen='--gen'
   fi

   ## get module
   if [ "$p"x == "--module"x -o "$p"x == "--mod"x -o "$p"x == "-m"x  ];then
      op_module='--module'
   else
      if [ $op_module -a ! $cg_module ];then
         cg_module=$p
      fi
   fi

   ## next option
done

## if --gen together with --module
if [ $op_gen -a ! $cg_module ];then
    echo '--module must be provied with --gen option.'
    exit
fi


## skip to cmd area
## set module via --module runtime parameter
#if [ $op_module ];then 
#   moduleset $cg_module
#fi

if [ "$cmd"x == "module"x ];then
   subcmd=$2

   if [ ! $subcmd ];then
      echo "    cg-cli module get"
      #echo "    cg-cli module set <module-name> [parent-module]"
      echo "    cg-cli module set <module-name>"
      exit
   fi

   if [ "$subcmd"x == "get"x  ];then
      cmd=cmdmoduleget

   elif [ "$subcmd"x == "set"x  ];then
      if [[ ! $3 ]];then
          #echo "    cg-cli module set <module-name> [parent-module]"
          echo "    cg-cli module set <module-name>"
          exit
      fi
      cmd=cmdmoduleset
   fi

elif [ "$cmd"x == "db"x  ];then
   subcmd=$2$3
   subcmd_1=$2

   if [ "$subcmd_1"x == "sanity"x ];then
      cmd=dbsanity

   elif [ "$subcmd"x == "geturl"x ];then
      cmd=dbgeturl

   elif [ "$subcmd"x == "seturl"x ];then
      ## $4  database
      ## $5  host
      ## $6  port
      ## $7  user
      user=$7
      ## $8  passw
      passw=$8
      if [ ! $4 ];then
         echo "    cg-cli db set url <database> [localhost] [3306] [root] [root]"
         exit
      fi

      if [ $user ];then
         # cannot only user withou password
         if [ ! $passw ];then
            echo "    cg-cli db set url $4 $5 $6 $user [passw]"
            exit
         fi
      fi
      cmd=dbseturl

   elif [ "$subcmd"x == "runsql"x ];then
      cmd=dbrunsql

   elif [ "$subcmd"x == "showtables"x ];then
         cmd=dbshowtables
   
   elif [ "$subcmd"x == "showcreate"x ];then
      if [ "$4"x == "table"x ];then

         ## check usage
         if [ ! $5 ];then
            #usage_db
            echo "    cg-cli db show create table <table-name>"
            exit
         fi 
         ## end

         cmd=dbshowcreatetable
      else
         echo "    cg-cli db show create table <table-name>"
         exit
      fi
   elif [ "$subcmd"x == "gentoken"x ];then
       dataurl=$4
       user=$5

       if [ ! $user ];then
         echo "    cg-cli db gen token <data-url> <user>"
         exit
       fi

       cmd=dbgentoken

   elif [ "$subcmd"x == "genperms"x ];then   
       dataurl=$4
       user=$5

       if [ ! $user ];then
         echo "    cg-cli db gen perms <data-url> <user>"
         exit
       fi

       cmd=dbgenperms

   else 
         usage_db
         exit
   fi

elif [ "$cmd"x == "crud"x ];then
   subcmd=$2

   if [ "$subcmd"x == "reset"x ];then
      ## reset src file
      if [ -d src/main/java/com/jfeat/am ];then
         #echo "rm -rf src/main/java/com/jfeat/am"
         rm -rf src/main/java/com/jfeat/am
      fi

      cmd=crudreset

   elif [ "$subcmd"x == "one"x ];then
      
      ## check usage
      if [ ! $3 ];then
         usage_crud
         exit
      fi 
      ## end

      cmd=crudone

   elif [ "$subcmd"x == "onemany"x ];then
      # $3-master; $4-slave:mid
     
      ## check usage
      if [ ! $4 ];then
         usage_crud
         exit
      fi 
      ## end

      cmd=crudonemany

   elif [ "$subcmd"x == "manymany"x ];then
       # $3-master; $4-peer, $5-relation

      ## check usage
      if [ ! $5 ];then
         usage_crud
         exit
      fi 
      ## end

      cmd=crudmanymany
   
   elif [ "$subcmd"x == "group"x ];then
       # $3-group; $4-group

      ## check usage
      if [ ! $3 ];then
         usage_crud
         exit
      fi
      if [[ $3 == --* ]];then
         usage_crud
         exit
      fi

      cmd=crudgroup

   elif [ "$subcmd"x == "groupby"x ];then
       # $3-group; $4-groupBy $5-groupId

      ## check usage
      if [ ! $5 ];then
         usage_crud
         exit
      fi

      if [[ $5 == --* ]];then
         usage_crud
         exit
      fi

      cmd=crudgroupby

   elif [ "$subcmd"x == "xml"x ];then
      cruds=$3

      if [ ! $cruds ];then
         cruds='cruds.xml'
      fi

      if [ ! -f $cruds ];then
         echo "$cruds not exists!"
         exit
      fi

      cmd=cmdcrudxml

   elif [ "$subcmd"x == "init"x ];then
      if [[ ! $3 == table ]];then
         echo "    cg-cli crud init table <table-name> [...]"
         exit
      fi
      if [ ! $4 ];then
         echo "    cg-cli crud init table <table-name> [...]"
         exit
      fi
      cmd=crudinitializetable
   else
       usage_crud
       exit
   fi

elif [ "$cmd"x == "test"x ];then
   if [  "$2"x == "crud"x ];then 
       if [ "$3"x == "one"x ];then
            cmd=testcrudone
       elif [ "$3"x == "onemany"x ];then
            cmd=testcrudonemany
            if [ "$4"x == "x2"x ];then
               cmd=testcrudonemanyx2
            fi
       elif [ "$3"x == "manymany"x ];then
           cmd=testcrudmanymany
       elif [ "$3"x == "group"x ];then
           cmd=testcrudgroup
       elif [ "$3"x == "groupby"x ];then
           cmd=testcrudgroupby
           if [ "$4"x == "field"x ];then
               cmd=testcrudgroupbyfield
            fi
       else
         usage
         exit
       fi

   else
      usage
      exit
   fi
elif [ "$cmd"x == "build"x  ];then
   subcmd=$2

   if [ "$subcmd"x == "init"x ];then
      arg=$3;
      if [ "$arg"x == "table"x ];then
          cmd=cmdbuildinittable
      else
         echo "Usage: cg-cli build init table <table> [...]"
         exit
      fi
   elif [ "$subcmd"x == "crud"x ];then
      arg=$3;
      if [ "$arg"x == "xml"x ];then
          cmd=cmdbuildcrudxml
      else
         echo "Usage: cg-cli build crud xml [/path/to/cruds.xml]"
         exit
      fi
   else
       echo "Usage:"
       echo "    cg-cli build init table <table> [...]"
       echo "    cg-cli build crud xml [/path/to/cruds.xml]"
       exit
   fi    


elif [ "$cmd"x == "cruds"x ];then
   ## cg-cli cruds dsl
   if [[ ! $2 == dsl ]];then
       usage_cruds
       exit
   fi

   subcmd=$3

   ## cg-cli cruds dsl show
   if [[ $subcmd == show ]];then
      cmd=crudsdslshow


   ## cg-cli cruds dsl add 
   elif [[ $subcmd == add ]];then
      subcmd=$4

      if [[ $subcmd == one ]];then
         if [ ! $5 ];then
            usage_cruds
            exit
         fi
         cmd=crudsdsladdone

      elif [[ $subcmd == onemany ]];then
         ## TODO, check --slave
         cmd=crudsdsladdonemany

      elif [[ $subcmd == manymany ]];then
         if [ ! $7 ];then
            usage_cruds
            exit
         fi
         cmd=crudsdsladdmanymany

      elif [[ $subcmd == group ]];then
         if [ ! $5 ];then
            usage_cruds
            exit
         fi
         cmd=crudsdsladdgroup

      else
          usage_cruds
          exit
      fi

   ## cg-cli cruds dsl run -f <crud-config>
   elif [[ $subcmd == run ]];then
      if [[ ! $4 == -f ]];then
         echo "    cg-cli cruds dsl run -f <crud-config>"
         exit
      fi
      if [ ! -e $5 ];then
         echo "    cg-cli cruds dsl run -f <crud-config>"
         echo fatal: cruds config file $3 not exists
         exit
      fi
      cmd=crudsdslrun

   else 
       usage_cruds
       exit
   fi
elif [ "$cmd"x == "yaml"x ];then
   subcmd=$2

   if [ "$subcmd"x == "get"x ];then
      arg=$3;
      if [ "$arg"x == "url"x ];then
          cmd=yamlgeturl
      else
         echo "Usage: cg-cli yaml get url"
         exit
      fi
   elif [ "$subcmd"x == "run"x ];then
      arg=$3;
      if [ "$arg"x == "sql"x ];then
          cmd=yamlrunsql
      else 
         echo "Usage: cg-cli yaml run sql [test]"
         exit
      fi
   elif [ "$subcmd"x == "show"x ];then
      arg3=$3;
      arg4=$4;

      if [ "$arg3"x == "create"x -a "$arg4"x == "tables"x ];then
            cmd=yamlshowcreatetables
      else 
         echo "Usage: cg-cli yaml show create tables"
         exit
      fi
   else 
       echo "Usage:"
       echo "    cg-cli yaml get url"
       echo "    cg-cli yaml run sql [test]"
       echo "    cg-cli yaml show create tables"
       exit
   fi
elif [ "$cmd"x == "coding"x ];then
    subcmd=$2

    if [ "$subcmd"x == "sql"x ];then
         sql=$3
         module=$4
         ##
         CRUDS='cruds.xml'

         if [ ! $sql ];then 
            echo "    cg-cli coding sql <.sql> <module>"
            exit
         fi

         ## check module
         if [ ! $module ];then 
             echo "    cg-cli coding sql <.sql> <module>"
             exit
         fi

         ## check sql 
         if [ ! -f $sql ];then 
            echo "$sql not exists"
            exit
         fi
         ## check cruds.xml
         if [ ! -f $CRUDS ];then 
            echo "$CRUDS not exists"
            exit
         fi

         cmd=cmdcodingsql
    else  
       echo "    cg-cli coding sql <.sql> <module>"
       exit
    fi
else
    echo "Unknow command: $cmd";
    exit
fi


##########################
## main                 ##
##########################
os_name=$(uname)
if [[ $os_name == 'Darwin' ]];then
   dir=$(greadlink -f "$0")
else 
   dir=$(readlink -f "$0")
fi

### start ###
#dir=$(readlink -f "$0")
dir=$(dirname $dir)
CONFCLI="perl -I$dir/local $dir/local/conf-cli"

## working dir
POM=code-generator-pom.xml
pom=${PWD}/gen/$POM

# echo 1 $dir/assets/$POM
   
if [ ! -e $pom ];then
   if [ ! -d gen ];then
       mkdir gen
   fi
   cp $dir/assets/$POM $pom
fi

## get connection string
URL=$(grep "<url>" $pom)
URL=${URL%</url>}
URL=${URL#*<url>}
URL=${URL//amp;/}
#echo $url

match_database(){
   url=$1

   #cut after ?
   db=$url
   db=${db##*/}
   db=${db%%[\?]*}
   echo $db
}

moduleget(){
   grep moduleName gen/$POM | grep -v '\$'
   #grep parentPackage gen/$POM | grep -v '\$'
}

moduleset() {
    if [ ! -e gen/$POM ];then
       cp $dir/assets/$POM gen/$POM
    fi

   ## if op=set
   op=$2

   #<moduleName>cg</moduleName>
   module_name=$1    ## cg
   #parent_module=$2  ## module

   if [ ! $parent_module ];then
       parent_module=module
   fi

   uname=$(uname)

   if [ "$uname"x == "Darwin"x ];then
      sed -i "" "s/<moduleName>[a-zA-Z]*<\/moduleName>/<moduleName>$module_name<\/moduleName>/" $pom
      #if [ $parent_module ];then
      #     sed -i "" "s/<parentPackage>[a-zA-Z]*<\/parentPackage>/<parentPackage>$parent_module<\/parentPackage>/" $pom
      #fi
   else
      sed -i  "s/<moduleName>[a-zA-Z]\+<\/moduleName>/<moduleName>$module_name<\/moduleName>/" $pom
      #if [ $parent_module ];then
      #     sed -i  "s/<parentPackage>[a-zA-Z]\+<\/parentPackage>/<parentPackage>$parent_module<\/parentPackage>/" $pom
      #fi
   fi

   if [ $op ];then
      moduleget
   fi
}

dbgeturl(){
    #grep dbUrl gen/$POM | grep -v '\$'
    grep '\<url\>' gen/$POM | grep -v '\$'
}

## config database
dbseturl() {
    if [ ! -e gen/$POM ];then
       cp $dir/assets/$POM gen/$POM
    fi
    #url='<url>jdbc:mysql://127.0.0.1/test?user=root&amp;password=root&amp;characterEncoding=utf8</url>'
    # set    $2
    # config $3
    mysql_db=$4
    mysql_host=$5
    mysql_port=$6
    mysql_user=$7
    mysql_pw=$8
    if [ ! $mysql_host ];then
        mysql_host='127.0.0.1'
    fi
    if [ $mysql_port ];then
        mysql_port=":$mysql_port"
    fi
    if [ "$mysql_port"x == ":3306"x ];then
        mysql_port=''
    fi
    if [ ! $mysql_user ];then
        mysql_user=root
    fi
    if [ ! $mysql_pw ];then
        mysql_pw=root
    fi
    
    uname=$(uname)

    #sed -i "s/<url>jdbc:mysql:\/\/[[:digit:]]\+.[[:digit:]]\+.[[:digit:]]\+.[[:digit:]]\+\/\w\+/<url>jdbc:mysql:\/\/$mysql_host$mysql_port\/$mysql_db/;s/user=\w\+/user=$mysql_user/;s/password=\w\+/password=$mysql_pw/" $pom
    if [ "$uname"x == "Darwin"x ];then
        sed -i "" "s/<url>jdbc:mysql:\/\/[a-zA-Z0-9.:]*\/[a-zA-Z_]*/<url>jdbc:mysql:\/\/$mysql_host$mysql_port\/$mysql_db/;s/user=[a-zA-Z]*/user=$mysql_user/;s/password=[a-zA-Z]*/password=$mysql_pw/" $pom
    else
        sed -i "s/<url>jdbc:mysql:\/\/[a-zA-Z0-9.:]\+\/[a-zA-Z_]*\+/<url>jdbc:mysql:\/\/$mysql_host$mysql_port\/$mysql_db/;s/user=\w\+/user=$mysql_user/;s/password=\w\+/password=$mysql_pw/" $pom
    fi

    #sanity
    grep "<url>" gen/$POM | grep -v '\$'
}


## sanity test for mysql
dbsanity() {
   url=$1
   mysql_test=$($dir/mysql-test/bin/mysql-test $url "select now()")
   if [ "$mysql_test" ];then
      echo "Connection to $url succeeded!"
   else
      exit
   fi
}

dbrunsql(){
   url=$1
   schemasql=$2
   param1=$3
   param2=$4
   param3=$5

   ## check sql, move to src/main/resources/sql
   if [ ! -d  src/main/resources/sql ];then 
      mkdir -p src/main/resources/sql
   fi

   if [ ! "$schemasql" ];then
      ## mv current dir sql to src/main/resources/sql
      for cursql in $(ls *.sql);do
         mv $cursql src/main/resources/sql
      done

      ## run all sql files
      for sql in $(ls src/main/resources/sql/*.sql);do
         echo $sql

         ## remove all comment lines first
         perl -i -ne "if(/^--/ || /^\#/){next;}print;" $sql
         rm "$sql.bak"

         $dir/mysql-test/bin/mysql-test $url $sql
      done
      return
   fi

   ### run sql file
   if [ -f  "$schemasql" ];then
      $dir/mysql-test/bin/mysql-test $url $schemasql $param1 $param2 $param3
      return
   fi

   ## if user schema sql, check exists
   if [ "$schemasql" ];then
      if [[ $schemasql == SELECT* ]] || [[ $schemasql == select* ]] || 
         [[ $schemasql =~ INSERT* ]] || [[ $schemasql == insert* ]] || 
         [[ $schemasql =~ UPDATE* ]] || [[ $schemasql == update* ]] || 
         [[ $schemasql =~ DELETE* ]] || [[ $schemasql == delete* ]] || 
         [[ $schemasql =~ SHOW* ]]   || [[ $schemasql == show* ]]
      then
           echo $schemasql > /dev/null
      else
          echo "Not support sql: $schemasql"
          return
      fi

      ## run sql
      $dir/mysql-test/bin/mysql-test $url "$schemasql"
      return
   fi
}

yamlrunsql(){
   url=$1

   ## for test database
   test=$2

   if [ $test ];then
      url=$(echo $url | sed 's/\/[a-z]*\?/\/test\?/g')
      url=${url//\/test\?/\/$test\?}  ## create table with [[:nothing:]] ) 
   fi

   ## run all sql files
   for sql in $(ls src/main/resources/sql/*.sql);do
      echo $sql
      echo '---'
      $dir/mysql-test/bin/mysql-test $url $sql
      
      ## show create tables
      subyamlshowcreatetables $url $sql
   done
}

yamlshowcreatetables(){
    url=$1

    ## run all sql files
    for sql in $(ls src/main/resources/sql/*.sql);do
       subyamlshowcreatetables $url $sql
    done
}

subyamlshowcreatetables(){
   url=$1
   sql=$2

    ## remove CREATE TABLE
   result=$(grep "CREATE TABLE" $sql)

   ## only if has result
   result=${result//CREATE[[:space:]]TABLE/}  ## CREATE TABLE with [[:nothing:]] ) 
   result=${result//create[[:space:]]table/}  ## create table with [[:nothing:]] ) 
   result=${result//\(/ }  ## replace ( with [[:space:]])
   result=${result//\`/}  ## remove all `

   ## show create table
   for t in $result;do  
      dbshowcreatetable $url $t
      echo ''
   done
}

dbshowtables() {
    url=$1

    db=$(match_database $url)
    sql="select TABLE_NAME from INFORMATION_SCHEMA.TABLES where TABLE_SCHEMA='$db' and TABLE_NAME <> 'schema_version'"
    for t in $($dir/mysql-test/bin/mysql-test "$url" "$sql");do
        echo $t
    done
}

dbshowcreatetable() {
    url=$1
    table=$2
    sql="show create table $table"

    result=$($dir/mysql-test/bin/mysql-test "$url" "$sql")
    #result="'tenant'|'CREATE TABLE \`tenant\` ( \`id\` bigint(20) NOT NULL, \`status\` int(11) DEFAULT NULL, \`name\` varchar(255) DEFAULT NULL, \`delete_flag\` int(11) NOT NULL DEFAULT '1', PRIMARY KEY (\`id\`)) ENGINE=InnoDB DEFAULT CHARSET=utf8'"
    result=${result#*[|]}   ## remove before | 
    result=${result#*[\']}  ## remove before '
    result=${result%[\']*}  ## remove after '
    #result=${result//\',/\',!}  ## replace , with ,! 
    result=${result//,/,!}  ## replace , with ,! 
    result=${result//\)\)/\)!\)}  ## replace )) with )!) 
    result=${result//\`id\` /! \`id\` }  ## replace )) with )!) 
    #result=${result//AUTO_INCREMENT,/AUTO_INCREMENT,!}  ## replace )) with )!) 
     
    #result=${result#*[(]}
    #result=${result%[)]*}
    #arr=(${result//,/})
    #arr=($(echo "$result" | tr ',' '\n'))
    
    echo $result | tr '!' '\n'
}

fix_data_url() {
    data=$1
    
    ## handle data
    if [[ $data == jdbc:* ]];then
       data=$data
    elif [[ $data == [0-9.a-z]*/* ]];then
       data_name=${data#*/}  ## remove all before /
       data_host=${data%/*}  ## remove all after /
       data="jdbc:mysql://$data_host/$data_name?user=root&password=root&autoReconnect=true&characterEncoding=utf8&allowMultiQueries=true"
    fi
    echo $data
}

dbgentoken() {
   dataurl=$1
   user=$2
   ## fix data url
   dataurl=$(fix_data_url $dataurl)

   schemasql="select tenant_id,id,account from user where account='$user'"

   result=$($dir/mysql-test/bin/mysql-test $dataurl "$schemasql")
   result=${result//\'/}
   result=${result/\|/ }
   result=${result/\|/ }

   token=$(java -jar $dir/local/genToken.jar $result 72h)
   echo $token
}

dbgenperms() {
   dataurl=$1
   user=$2
   ## fix data url
   dataurl=$(fix_data_url $dataurl)

   schemasql="select perm.identifier from user \
   LEFT JOIN user_role ON user_role.userid=user.id \
   LEFT JOIN role ON user_role.roleid=role.id \
   LEFT JOIN role_perm ON role_perm.roleid=role.id \
   LEFT JOIN perm ON perm.id=role_perm.permid WHERE account='$user'"

   result=$($dir/mysql-test/bin/mysql-test $dataurl "$schemasql")
   #ok=$(perl -ne "if(/^ext[\r\n]$/){next;}s/[\r\n\s\t]$/ /;print;" $list)

   result=${result//[$'\t\r\n']/ }

   perms=''
   for it in $result;do
       perms="$perms \"$it\","
   done

   #perms=${perms/ /\[} ## replace first space with [ 
   perms=${perms#* }    ## replace first space with [ 
   perms=${perms%,*}    ## remove the last ,
   perms=${perms//, /,}  ## remove all space
   
   echo "[$perms]"
}

buildcrudxml() {
    xml=$1

    $CONFCLI table reset --save

      ## ** CODE-GENERATOR DO NOT SUPPORT MULTI EXECUTION **

      ## BEGIN 
      ## config crud
      #$CONFCLI crud reset --save
      #$CONFCLI crud add -f $cruds --save
      ## config end
   
      ##$CONFCLI list -t -c
      ## gen crud
      ##gen
      ## END

      ## ** EXECUTE FOR EACH CRUD **
      result=$(cat $xml)
      result=${result##*\<cruds\>}  ## remove all before <cruds>
      result=${result%%\<\/cruds\>*}  ## remove all after <cruds>
      result=${result//[[:space:]]/}  ## remove space
      result=${result//\<\/crud\>/\<\/crud\> }  ## replace </crud> with </crud>[[:space:]]

      for crud in $result;do
         ## config crud
         $CONFCLI crud reset --save
         $CONFCLI crud add -l $crud --save
            
         $CONFCLI list -t -c
         ## gen crud
         gen

      done
}

buildinittable() {
   if [ $op_gen ];then
      echo "mvn -Dinit=true com.jfeat:sb-code-generator:1.3.4:generate -f $pom"
      mvn -Dinit=true com.jfeat:sb-code-generator:1.3.4:generate -f $pom
   fi
}

testinit(){
   ## copy default schema sql for crud test
   if [ ! -e src/main/resources/sql/cg-mysql-schema.sql ];then
      if [ ! -d src/main/resources/sql ];then
          mkdir -p src/main/resources/sql
      fi
      cp $dir/assets/src/main/resources/sql/cg-mysql-schema.sql src/main/resources/sql
   fi
   if [ ! -e src/main/java/com/jfeat/AmApplication.java ];then
      if [ ! -d src/main/java/com/jfeat ];then
          mkdir -p src/main/java/com/jfeat
      fi
      cp $dir/assets/src/main/java/com/jfeat/AmApplication.java src/main/java/com/jfeat
   fi
   if [ ! -e pom.xml ];then
      cp $dir/assets/pom.xml ./
   fi

   ## reset src file
   if [ -d src/main/java/com/jfeat/am ];then
      #echo "rm -rf src/main/java/com/jfeat/am"
      rm -rf src/main/java/com/jfeat/am
   fi
}


yamlgeturl(){

    YAMLCLI="perl -I$dir/local $dir/local/yaml-cli"

    ## get active url from application.yml
    url=$($YAMLCLI get active url);
    echo $url;
}

codingsql() {
    sql=$1
    module=$2
    ## 
    cruds='cruds.xml'

    result='debug'
    ## check db sanity 
    if [[ ! $result == debug ]];then 
      result=$(dbsanity $URL)
      if [[ ! $result == *succeeded! ]];then
         echo "[$url] is not sanity !"
         echo "    cg-cli db set url <database> [localhost] [3306] [root] [root]"
         exit
      fi
    fi

    ## check sql, move to src/main/resources/sql
    if [ ! -d  src/main/resources/sql ];then 
       mkdir -p src/main/resources/sql
    fi
    schemasql=$(basename $sql)
    if [ ! -f  src/main/resources/sql/$schemasql ];then 
       cp $sql src/main/resources/sql
    fi 

    ## run sql first
    schema="src/main/resources/sql/$schemasql"
    dbrunsql "$URL" "$schema"

    ## verify cruds.xml
    buildcrudxml $cruds
}


gen() {
   if [ $op_gen ];then
      echo "mvn com.jfeat:sb-code-generator:1.3.4:generate -f $pom"
      mvn com.jfeat:sb-code-generator:1.3.4:generate -f $pom

      ## prepare AmApplication.java
      if [ ! -e src/main/java/com/jfeat/AmApplication.java ];then
         if [ ! -d src/main/java/com/jfeat ];then
             mkdir -p src/main/java/com/jfeat
         fi
         cp $dir/assets/src/main/java/com/jfeat/AmApplication.java src/main/java/com/jfeat
      fi

      ## prepare pom.xml
      if [ ! -e pom.xml ];then
         cp $dir/assets/pom.xml ./
      fi

      ## prepare application.yml
      if [ ! -e src/main/resources/application.yml ];then
         if [ ! -d src/main/resources ];then
             mkdir -p src/main/resources
         fi
         cp $dir/assets/src/main/resources/application.yml src/main/resources/application.yml
      fi
      
      cp $dir/assets/.gitignore ./
      #cp $dir/assets/README.md ./
   fi
}


genurl(){
   db=$1
   host=$2
   port=$3
   user=$4
   password=$5

   ## port
   if [ "$port"x == "3306"x ];then
      port=''
   else
      port=":$port"
   fi

   url="jdbc:mysql://$host$port/$db?user=$user\&password=$password\&autoReconnect=true\&characterEncoding=utf8\&allowMultiQueries=true"
   echo $url
}

### main ##

## set module via --module runtime parameter
if [ $op_module ];then 
   moduleset $cg_module
fi

## check test init first
if [[ $cmd == test* ]];then
    testinit
fi

## check cmd and exec
if [ "$cmd"x == "cmdmoduleget"x ];then
   moduleget

elif [ "$cmd"x == "cmdmoduleset"x ];then
   ## 'set' notify for module set
   moduleset $cg_module 'set'

elif [ "$cmd"x == "dbgeturl"x ];then
   dbgeturl $@

elif [ "$cmd"x == "dbseturl"x ];then
   dbseturl $@

elif [ "$cmd"x == "dbsanity"x ];then
   url=$3
   if [ ! $url ];then 
      url=$URL
   fi
   dbsanity $url

elif [ "$cmd"x == "dbrunsql"x ];then
    schema=$4
    param1=$5
    param2=$6
    param3=$7

    dbrunsql "$URL" "$schema" $param1 $param2 $param3

elif [ "$cmd"x == "dbshowtables"x ];then
   dbshowtables $URL

elif [ "$cmd"x == "dbshowcreatetable"x ];then
   tab=$5
   dbshowcreatetable $url $tab

elif [ "$cmd"x == "dbgentoken"x ];then
   dataurl=$4
   user=$5
   if [ ! $user ];then
      user=admin
   fi

   dbgentoken $dataurl $user

elif [ "$cmd"x == "dbgenperms"x ];then
   dataurl=$4
   user=$5
   if [ ! $user ];then
      user=admin
   fi

   dbgenperms $dataurl $user

elif [ "$cmd"x == "crudreset"x ];then
   #reset table and cruds.xml
   $CONFCLI table reset --save
   $CONFCLI crud reset --save

elif [ "$cmd"x == "crudone"x ];then
   master=$3

   shift; ## shift crud
   shift; ## shift one

   # for master in $@;do

   #    if [[ $master == --* ]];then
   #       continue
   #    fi
 
   #    # config table
   #    $CONFCLI table reset --save
   #    $CONFCLI table add $master --save
   #    # config crud
   #    $CONFCLI crud reset --save
   #    $CONFCLI crud add one $master --save
   #    # config end

   #    $CONFCLI list -t -c
   #    ## gen crud
   #    gen

   # done

   # config table
   $CONFCLI table reset --save

   ## for crudone
   for m in $@;do
      if [[ $m == --* ]];then
         continue
      fi

      ## reset 
      if [ $op_gen ];then
         $CONFCLI crud reset --save
      fi

      $CONFCLI crud add one $m --save

      ## gen for each time
      gen
   done
   
   $CONFCLI list -t -c

   ## gen crud
   #gen

   ## do not need to gen table


elif [ "$cmd"x == "testcrudone"x ];then
   master='cg_master_resource'

   shift; ## shift crud
   shift; ## shift one

   # config table
   $CONFCLI table reset --save
   $CONFCLI crud reset --save

   ## for crudone
   for m in $@;do
      if [[ $m == --* ]];then
         continue
      fi
      $CONFCLI crud add one $m --save
   done
   
   $CONFCLI list -t -c

   ## gen crud
   gen

   ## do not need to gen tables


elif [ "$cmd"x == "crudonemany"x ];then
   master=$3; 
   
   shift; ## shift cmd
   shift; ## shift onemany
   shift; ## shift master

   ## first#1 step, genreate master model

   # config table
   $CONFCLI table reset --save
   # $CONFCLI table add $master $@ --save

   # just reset crud for subsequent gen operation 
   if [ $op_gen ];then
      $CONFCLI crud reset --save
   fi
   ## save config for gen
   $CONFCLI crud add onemany $master $@ --save

   $CONFCLI list -t -c

   ## gen crud
   gen

   ## second#2 step, generator tables
   if [ $op_gen ];then

      $CONFCLI crud reset --save
      $CONFCLI table reset --save
      $CONFCLI table add $@ --save

      $CONFCLI list -T  ## do not need to show the config
      ## gen crud
      gen
   fi

elif [ "$cmd"x == "testcrudonemany"x ];then
   master='cg_master_resource'
   slave='cg_master_resource_item:master_id'
   slave_table='cg_master_resource_item'

   # config table
   $CONFCLI table reset --save
   #$CONFCLI table add $master $slave --save

   # config crud
   $CONFCLI crud reset --save
   $CONFCLI crud add onemany $master $slave  --save
   # config end

   $CONFCLI list -t -c

   ## gen crud
   gen

   ## second#2 step, generator table persistence
   $CONFCLI crud reset --save
   $CONFCLI table reset --save
   $CONFCLI table add $slave_table --save

   $CONFCLI list -T  ## do not need to show the config

   ## gen crud
   gen

## two slaves 
elif [ "$cmd"x == "testcrudonemanyx2"x ];then
   master='cg_master_resource'
   slave='cg_master_resource_item:master_id'
   slave2='cg_master_resource_record:other_id'
   slave_table_='cg_master_resource_item'
   slave2_table='cg_master_resource_record'

   # config table
   $CONFCLI table reset --save
   #$CONFCLI table add $master $slave $slave2 --save

   # config crud
   $CONFCLI crud reset --save
   $CONFCLI crud add onemany $master $slave $slave2 --save
   # config end

   $CONFCLI list -t -c

   ## gen crud
   gen


   ## second#2 step, generator table persistence
   $CONFCLI crud reset --save
   $CONFCLI table reset --save
   $CONFCLI table add $slave_table $slave2_table --save

   $CONFCLI list -T  ## do not need to show the config

   ## gen crud
   gen


elif [ "$cmd"x == "testcrudmanymany"x ];then
   master='cg_master_resource'
   peer='cg_master_resource_peer'
   relation='cg_master_resource_relation'

   # config table
   $CONFCLI table reset --save
   #$CONFCLI table add $master $peer $relation --save

   # config crud
   $CONFCLI crud reset --save
   $CONFCLI crud add manymany $master $peer $relation --save
   # config end
   
   # show the result [-t - show tables] and  [-c - show cruds]
   $CONFCLI list -t -c

   ## gen crud
   gen

   ## second#2 step, generator table persistence
   $CONFCLI crud reset --save
   $CONFCLI table reset --save
   $CONFCLI table add $master $peer --save

   $CONFCLI list -T  ## do not need to show the config

   ## gen crud
   gen

    
elif [ "$cmd"x == "crudmanymany"x ];then
   master=$3; 
   peer=$4; 
   relation=$5

   # config table
   $CONFCLI table reset --save
   #$CONFCLI table add $master $peer $relation --save

   # config crud
   if [ $op_gen ];then
      $CONFCLI crud reset --save
   fi
   $CONFCLI crud add manymany $master $peer $relation --save
   # config end
   
   # show the result [-t - show tables] and  [-c - show cruds]
   $CONFCLI list -t -c

   ## gen crud
   gen

   if [ $op_gen ];then
      ## second#2 step, generator table persistence
      $CONFCLI crud reset --save
      $CONFCLI table reset --save
      $CONFCLI table add $master $peer --save

      $CONFCLI list -T  ## do not need to show the config

      ## gen crud
      gen
   fi

elif [ "$cmd"x == "crudgroup"x -o "$cmd"x == "crudgroupby"x -o "$cmd"x == "testcrudgroup"x -o "$cmd"x == "testcrudgroupby"x -o  "$cmd"x == "testcrudgroupbyfield"x ];then

   if [ "$cmd"x == "crudgroup"x ];then

      shift  ## crud
      shift  ## group

      ## skip --gen
      for group in $@;do
         if [[ $group == --* ]];then
            continue
         fi

         # config table
         $CONFCLI table reset --save
         #$CONFCLI table add $group --save

         # config crud
         #$CONFCLI crud reset --save
         $CONFCLI crud add group $group --save
         # config end

         $CONFCLI list -t -c
         ## gen crud
         gen
      done


   elif [ "$cmd"x == "testcrudgroup"x ];then

      group='cg_master_resource_category'

      # config table
      $CONFCLI table reset --save
      #$CONFCLI table add $group --save

      # config crud
      $CONFCLI crud reset --save
      $CONFCLI crud add group $group --save
      # config end

      $CONFCLI list -t -c
      ## gen crud
      gen

   ## gen groupby second step
   elif [ "$cmd"x == "crudgroupby"x -o "$cmd"x == "testcrudgroupby"x -o  "$cmd"x == "testcrudgroupbyfield"x ];then

      if [ "$cmd"x == "crudgroupby"x ];then
         group=$3;
         groupBy=$4;
         groupId=$5;

      elif [ "$cmd"x == "testcrudgroupby"x ];then
         group='cg_master_resource_category'
         groupBy='cg_master_resource'
         groupId='category_id'

      elif [ "$cmd"x == "testcrudgroupbyfield"x ];then
         group='cg_master_resource_category'
         groupBy='cg_master_resource'
         groupId='category_field:field'
      fi

      ### gen group as first step

      # config table
      $CONFCLI table reset --save
      #$CONFCLI table add $group --save

      # config crud
      if [ "$cmd"x == "testcrudgroupby"x ];then
         $CONFCLI crud reset --save
      elif [ "$cmd"x == "testcrudgroupbyfield"x ];then
         $CONFCLI crud reset --save
      fi
      $CONFCLI crud add group $group --save
      # config end

      $CONFCLI list -t -c
      ## gen crud
      gen


      ### gen groupby as second step

      # config table
      $CONFCLI table reset --save
      #$CONFCLI table add $groupBy --save

      # config crud
      if [ "$cmd"x == "testcrudgroupby"x ];then
         $CONFCLI crud reset --save
      elif [ "$cmd"x == "testcrudgroupbyfield"x ];then
         $CONFCLI crud reset --save
      fi
      $CONFCLI crud add group $group $groupBy $groupId --save
      # config end

      $CONFCLI list -t -c
      ## gen crud
      gen
   fi

elif [ "$cmd"x == "cmdcrudxml"x ];then
      cruds=$3
      if [ ! $cruds ];then
         cruds='cruds.xml'
      fi

      buildcrudxml $cruds

elif [ "$cmd"x == "crudinitializetable"x ];then

   if [ ! -e $dir/src/main/resources/sql/cg-mysql-schema.sql ];then
      if [ ! -d $dir/src/main/resources/sql ];then
          mkdir -p $dir/src/main/resources/sql
      fi
      cp $dir/assets/src/main/resources/sql/cg-mysql-schema.sql src/main/resources/sql
   fi

   shift ## shift crud
   shift ## shift init
   shift ## shift table

   # config tables
   $CONFCLI table reset --save
   $CONFCLI table add $@ --save

   $CONFCLI crud reset --save
   #for t in $@;do 
   #    $CONFCLI crud add one $t --save
   #done

   $CONFCLI list -T

   # gen persistance
   buildinittable

elif [ "$cmd"x == "cmdbuildcrudxml"x ];then
      cruds=$4
      if [ ! $cruds ];then
         cruds='cruds.xml'
      fi

      buildcrudxml $cruds
elif [ "$cmd"x == "cmdbuildinittable"x ];then

   if [ ! -e $dir/src/main/resources/sql/cg-mysql-schema.sql ];then
      if [ ! -d $dir/src/main/resources/sql ];then
          mkdir -p $dir/src/main/resources/sql
      fi
      cp $dir/assets/src/main/resources/sql/cg-mysql-schema.sql src/main/resources/sql
   fi

   shift ## shift build
   shift ## shift init
   shift ## shift table

   # config tables
   $CONFCLI table reset --save
   $CONFCLI table add $@ --save

   $CONFCLI crud reset --save
   #for t in $@;do 
   #    $CONFCLI crud add one $t --save
   #done

   $CONFCLI list -T

   # gen persistance
   buildinittable
   
elif [ "$cmd"x == "yamlgeturl"x ];then
     yamlgeturl

elif [ "$cmd"x == "yamlrunsql"x ];then
    YAMLCLI="perl -I$dir/local $dir/local/yaml-cli"

            ## for test database
    test=$4

    ## get active url from application.yml
    url=$($YAMLCLI get active url);

    ## check yaml not exists
    num=0
    for i in $url;do 
      num=$[num+1]
    done
    if [ $num -gt 1 ];then
       echo ok $url
       exit
    fi

    yamlrunsql $url $test

elif [ "$cmd"x == "yamlshowcreatetables"x ];then
   YAMLCLI="perl -I$dir/local $dir/local/yaml-cli"

    ## get active url from application.yml
    url=$($YAMLCLI get active url);

    yamlshowcreatetables $url

elif [ "$cmd"x == "cmdcodingsql"x ];then
    sql=$3
    module=$4

    codingsql $sql $module
else
    usage
    exit
fi
