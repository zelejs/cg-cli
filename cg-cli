#!/usr/bin/env bash
usage() {
  echo "Usage:"
  echo "    cg-cli [OPTIONS] --help --gen"
  echo "    cg-cli module get"
  echo "    cg-cli module set <module-name> [parent-module]"
  echo "    cg-cli db get config"
  echo "    cg-cli db set config <database> [localhost] [3306] [root] [root]"
  echo "    cg-cli db sanity"
  echo "    cg-cli db run sql [/path/to/schema.sql]"
  echo "    cg-cli db show tables"
  echo "    cg-cli db show create table <table-name>"
  echo "    cg-cli crud reset"
  echo "    cg-cli crud one      <master> [...]"
  echo "    cg-cli crud onemany  <master> <slave:mid:id> [slave:mid1,mid2] [slave:relation::mid:id] [...]"
  echo "    cg-cli crud manymany <master> <peer> <relation>"
  echo "    cg-cli crud group    <group> [...]"
  echo "    cg-cli crud groupby  <group> <groupBy> <groupId>"
  echo "    cg-cli crud init table <table-name> [...]"
  echo "    cg-cli crud -f       </path/to/cruds.xml>"
  echo "    cg-cli test crud one"
  echo "    cg-cli test crud onemany"
  echo "    cg-cli test crud onemany x2"
  echo "    cg-cli test crud manymany"
  echo "    cg-cli test crud group"
  echo "    cg-cli test crud groupby"
  echo "    cg-cli test crud groupby field"
}


usage_db() {
  echo "Usage:"
  echo "    cg-cli [OPTIONS] --help --gen"
  echo "    cg-cli db get config"
  echo "    cg-cli db set config <database> [localhost] [3306] [root] [root]"
  echo "    cg-cli db sanity"
  echo "    cg-cli db run sql [/path/to/schema.sql]"
  echo "    cg-cli db show tables"
  echo "    cg-cli db show create table <table-name>"
}
usage_crud() {
  echo "Usage:"
  echo "    cg-cli [OPTIONS] --help --gen"
  echo "    cg-cli crud reset"
  echo "    cg-cli crud one      <master> [...]"
  echo "    cg-cli crud onemany  <master> <slave:mid:id> [slave:mid1,mid2] [slave::relation:mid:id] [...]"
  echo "    cg-cli crud manymany <master> <peer> <relation>"
  echo "    cg-cli crud group    <group> [groupBy] [groupId]"
  echo "    cg-cli crud init tables <table-name> [...]"
  echo "    cg-cli crud -f       </path/to/cruds.xml>"
}
usage_test() {
  echo "Usage:"
  echo "    cg-cli [OPTIONS] --help --gen"
  echo "    cg-cli test run sql [/path/to/schema.sql]"
  echo "    cg-cli test crud one"
  echo "    cg-cli test crud onemany"
  echo "    cg-cli test crud onemany x2"
  echo "    cg-cli test crud manymany"
  echo "    cg-cli test crud group"
  echo "    cg-cli test crud groupby"
  echo "    cg-cli test crud groupby field"
}

## start
cmd=$1
gen='-'
if [ ! $cmd ];then
   usage
   exit
fi
for p in $@;do
   if [ "$p"x == "--help"x ];then
      usage
      exit
   fi

   ## get check
   if [ "$p"x == "--gen"x ];then
      gen='--gen'
   fi
done


if [  "$cmd"x == "module"x ];then
   subcmd=$2

   if [ ! $subcmd ];then
      echo "    cg-cli module get"
      echo "    cg-cli module set <module-name> [parent-module]"
      exit
   fi

   if [ "$subcmd"x == "get"x  ];then
      cmd=moduleget

   elif [ "$subcmd"x == "set"x  ];then
      if [[ ! $3 ]];then
          echo "    cg-cli module set <module-name> [parent-module]"
          exit
      fi
      cmd=moduleset
   fi

elif [ "$cmd"x == "db"x  ];then
   subcmd=$2$3

   if [ "$subcmd"x == "getconfig"x ];then
      cmd=dbgetconfig

   elif [ "$subcmd"x == "setconfig"x ];then
      ## $4  database
      ## $5  host
      ## $6  port
      ## $7  user
      ## $8  passw
      if [ ! $4 ];then
         usage_db
         exit
      fi

      if [ $7 ];then
         if [ ! $8 ];then
            echo "    cg-cli db set config $4 $5 $6 $7 [passw]"
            exit
         fi
      fi
      cmd=dbsetconfig

   elif [ "$subcmd"x == "sanity"x ];then
      cmd=dbsanity

   elif [ "$subcmd"x == "runsql"x ];then
      cmd=dbrunsql

   elif [ "$subcmd"x == "showtables"x ];then
         cmd=dbshowtables
   
   elif [ "$subcmd"x == "showcreate"x ];then
      if [ "$4"x == "table"x ];then

         ## check usage
         if [ ! $5 ];then
            #usage_db
            echo "    cg-cli db show create table <table-name>"
            exit
         fi 
         ## end

         cmd=dbshowcreatetable
      else
         echo "    cg-cli db show create table <table-name>"
         exit
      fi

   else 
         usage_db
         exit
   fi

elif [ "$cmd"x == "crud"x ];then
   subcmd=$2

   if [ "$subcmd"x == "reset"x ];then
      ## reset src file
      if [ -d src/main/java/com/jfeat/am ];then
         #echo "rm -rf src/main/java/com/jfeat/am"
         rm -rf src/main/java/com/jfeat/am
      fi

      cmd=crudreset

   elif [ "$subcmd"x == "one"x ];then
      
      ## check usage
      if [ ! $3 ];then
         usage_crud
         exit
      fi 
      ## end

      cmd=crudone

   elif [ "$subcmd"x == "onemany"x ];then
      # $3-master; $4-slave:mid
     
      ## check usage
      if [ ! $4 ];then
         usage_crud
         exit
      fi 
      ## end

      cmd=crudonemany

   elif [ "$subcmd"x == "manymany"x ];then
       # $3-master; $4-peer, $5-relation

      ## check usage
      if [ ! $5 ];then
         usage_crud
         exit
      fi 
      ## end

      cmd=crudmanymany
   
   elif [ "$subcmd"x == "group"x ];then
       # $3-group; $4-group

      ## check usage
      if [ ! $3 ];then
         usage_crud
         exit
      fi
      if [[ $3 == --* ]];then
         usage_crud
         exit
      fi

      cmd=crudgroup

   elif [ "$subcmd"x == "groupby"x ];then
       # $3-group; $4-groupBy $5-groupId

      ## check usage
      if [ ! $5 ];then
         usage_crud
         exit
      fi

      if [[ $5 == --* ]];then
         usage_crud
         exit
      fi

      cmd=crudgroupby

   elif [ "$subcmd"x == "-f"x ];then
      cruds=$3


      if [ ! $cruds ];then
         echo "    cg-cli crud -f       </path/to/cruds.xml>"
         exit
      fi

      if [ ! -e $cruds ];then
         echo "    cg-cli crud -f       </path/to/cruds.xml>"
         echo ""
         echo "    Fatal: file $cruds not exists!"
         exit
      fi

      cmd=crud_f

   elif [ "$subcmd"x == "init"x ];then
      if [[ ! $3 == table ]];then
         echo "    cg-cli crud init table <table-name> [...]"
         exit
      fi
      if [ ! $4 ];then
         echo "    cg-cli crud init table <table-name> [...]"
         exit
      fi
      cmd=crudinitializetable
   else
       usage_crud
       exit
   fi

elif [ "$cmd"x == "test"x ];then
   if [ "$2"x == "run"x ];then 
      if [ ! $3 ];then
         usage
         exit
      fi
      cmd=testrunsql

   elif [  "$2"x == "crud"x ];then 
       if [ "$3"x == "one"x ];then
            cmd=testcrudone
       elif [ "$3"x == "onemany"x ];then
            cmd=testcrudonemany
            if [ "$4"x == "x2"x ];then
               cmd=testcrudonemanyx2
            fi
       elif [ "$3"x == "manymany"x ];then
           cmd=testcrudmanymany
       elif [ "$3"x == "group"x ];then
           cmd=testcrudgroup
       elif [ "$3"x == "groupby"x ];then
           cmd=testcrudgroupby
           if [ "$4"x == "field"x ];then
               cmd=testcrudgroupbyfield
            fi
       else
         usage
         exit
       fi

   else
      usage
      exit
   fi
   
elif [ "$cmd"x == "cruds"x ];then
   ## cg-cli cruds dsl
   if [[ ! $2 == dsl ]];then
       usage_cruds
       exit
   fi

   subcmd=$3

   ## cg-cli cruds dsl show
   if [[ $subcmd == show ]];then
      cmd=crudsdslshow


   ## cg-cli cruds dsl add 
   elif [[ $subcmd == add ]];then
      subcmd=$4

      if [[ $subcmd == one ]];then
         if [ ! $5 ];then
            usage_cruds
            exit
         fi
         cmd=crudsdsladdone

      elif [[ $subcmd == onemany ]];then
         ## TODO, check --slave
         cmd=crudsdsladdonemany

      elif [[ $subcmd == manymany ]];then
         if [ ! $7 ];then
            usage_cruds
            exit
         fi
         cmd=crudsdsladdmanymany

      elif [[ $subcmd == group ]];then
         if [ ! $5 ];then
            usage_cruds
            exit
         fi
         cmd=crudsdsladdgroup

      else
          usage_cruds
          exit
      fi

   ## cg-cli cruds dsl run -f <crud-config>
   elif [[ $subcmd == run ]];then
      if [[ ! $4 == -f ]];then
         echo "    cg-cli cruds dsl run -f <crud-config>"
         exit
      fi
      if [ ! -e $5 ];then
         echo "    cg-cli cruds dsl run -f <crud-config>"
         echo fatal: cruds config file $3 not exists
         exit
      fi
      cmd=crudsdslrun

   else 
       usage_cruds
       exit
   fi
else
    usage
    exit
fi


### start ###
dir=$(readlink -f $0)
dir=$(dirname $dir)
CONFCLI="perl -I$dir/local $dir/local/conf-cli"

## working dir
POM=code-generator-pom.xml
pom=${PWD}/gen/$POM

if [ ! -e $pom ];then
   if [ ! -d gen ];then
       mkdir gen
   fi
   cp $dir/assets/$POM $pom
fi

## get connection string
url=$(grep "<url>" $pom)
url=${url%</url>}
url=${url#*<url>}
url=${url//amp;/}
#echo $url

match_database(){
   #cut after ?
   db=$url
   db=${db##*/}
   db=${db%%[\?]*}
   echo $db
}

moduleget(){
   grep moduleName gen/$POM | grep -v '\$'
   grep parentPackage gen/$POM | grep -v '\$'
}

moduleset() {
    if [ ! -e gen/$POM ];then
       cp $dir/assets/$POM gen/$POM
    fi

   #<moduleName>cg</moduleName>
   module_name=$3    ## cg
   parent_module=$4  ## module

   if [ ! $parent_module ];then
       parent_module=module
   fi

   uname=$(uname)

   if [ "$uname"x == "Darwin"x ];then
      sed -i "" "s/<moduleName>[a-zA-Z]*<\/moduleName>/<moduleName>$module_name<\/moduleName>/" $pom
      if [ $parent_module ];then
           sed -i "" "s/<parentPackage>[a-zA-Z]*<\/parentPackage>/<parentPackage>$parent_module<\/parentPackage>/" $pom
      fi
   else
      sed -i  "s/<moduleName>[a-zA-Z]\+<\/moduleName>/<moduleName>$module_name<\/moduleName>/" $pom
      if [ $parent_module ];then
           sed -i  "s/<parentPackage>[a-zA-Z]\+<\/parentPackage>/<parentPackage>$parent_module<\/parentPackage>/" $pom
      fi
   fi

   moduleget
}

dbgetconfig(){
    #grep dbUrl gen/$POM | grep -v '\$'
    grep '\<url\>' gen/$POM | grep -v '\$'
}

## config database
dbsetconfig() {
    if [ ! -e gen/$POM ];then
       cp $dir/assets/$POM gen/$POM
    fi
    #url='<url>jdbc:mysql://127.0.0.1/test?user=root&amp;password=root&amp;characterEncoding=utf8</url>'
    # set    $2
    # config $3
    mysql_db=$4
    mysql_host=$5
    mysql_port=$6
    mysql_user=$7
    mysql_pw=$8
    if [ ! $mysql_host ];then
        mysql_host='127.0.0.1'
    fi
    if [ $mysql_port ];then
        mysql_port=":$mysql_port"
    fi
    if [ "$mysql_port"x == ":3306"x ];then
        mysql_port=''
    fi
    if [ ! $mysql_user ];then
        mysql_user=root
    fi
    if [ ! $mysql_pw ];then
        mysql_pw=root
    fi
    
    uname=$(uname)

    #sed -i "s/<url>jdbc:mysql:\/\/[[:digit:]]\+.[[:digit:]]\+.[[:digit:]]\+.[[:digit:]]\+\/\w\+/<url>jdbc:mysql:\/\/$mysql_host$mysql_port\/$mysql_db/;s/user=\w\+/user=$mysql_user/;s/password=\w\+/password=$mysql_pw/" $pom
    if [ "$uname"x == "Darwin"x ];then
        sed -i "" "s/<url>jdbc:mysql:\/\/[a-zA-Z0-9.:]*\/[a-zA-Z]*/<url>jdbc:mysql:\/\/$mysql_host$mysql_port\/$mysql_db/;s/user=[a-zA-Z]*/user=$mysql_user/;s/password=[a-zA-Z]*/password=$mysql_pw/" $pom
    else
        sed -i "s/<url>jdbc:mysql:\/\/[a-zA-Z0-9.:]\+\/\w\+/<url>jdbc:mysql:\/\/$mysql_host$mysql_port\/$mysql_db/;s/user=\w\+/user=$mysql_user/;s/password=\w\+/password=$mysql_pw/" $pom
    fi

    #sanity
    grep "<url>" gen/$POM | grep -v '\$'
}


## sanity test for mysql
dbsanity() {
   mysql_test=$($dir/mysql-test/bin/mysql-test $url "select now()")
   if [ "$mysql_test" ];then
      echo "Connection to $url succeeded!"
   else
      exit
   fi
}

dbrunsql(){
    schemasql=$1

    ## if user schema sql, check exists
    if [ $schemasql ];then
       if [ ! -e  $schemasql ];then
           echo "schema sql $schemasql not found!"
           exit
       fi

       $dir/mysql-test/bin/mysql-test $url $schemasql
       exit  ## end
    fi

    ## run all sql files
    for sql in $(ls src/main/resources/sql/*.sql);do
       echo $sql
       $dir/mysql-test/bin/mysql-test $url $sql
    done
}

dbshowtables() {
    db=$(match_database)
    sql="select TABLE_NAME from INFORMATION_SCHEMA.TABLES where TABLE_SCHEMA='$db' and TABLE_NAME <> 'schema_version'"
    for t in $($dir/mysql-test/bin/mysql-test "$url" "$sql");do
        echo $t
    done
}

dbshowcreatetable() {
    table=$1
    sql="show create table $table"
    result=$($dir/mysql-test/bin/mysql-test "$url" "$sql")
    #result="'tenant'|'CREATE TABLE \`tenant\` ( \`id\` bigint(20) NOT NULL, \`status\` int(11) DEFAULT NULL, \`name\` varchar(255) DEFAULT NULL, \`delete_flag\` int(11) NOT NULL DEFAULT '1', PRIMARY KEY (\`id\`)) ENGINE=InnoDB DEFAULT CHARSET=utf8'"
    result=${result#*[|]}   ## remove before | 
    result=${result#*[\']}  ## remove before '
    result=${result%[\']*}  ## remove after '
    result=${result//\',/\',!}  ## replace , with ,! 
    result=${result//\)\)/\)!\)}  ## replace )) with )!) 
    result=${result//\`id\` /! \`id\` }  ## replace )) with )!) 
    result=${result//AUTO_INCREMENT,/AUTO_INCREMENT,!}  ## replace )) with )!) 
     
    #result=${result#*[(]}
    #result=${result%[)]*}
    #arr=(${result//,/})
    #arr=($(echo "$result" | tr ',' '\n'))
    
    echo $result | tr '!' '\n'
}

crudinitializetable() {
   if [ "$gen"x == "--gen"x ];then
      echo "mvn -Dinit=true com.jfeat:sb-code-generator:1.3.3:generate -f $pom"
      mvn -Dinit=true com.jfeat:sb-code-generator:1.3.3:generate -f $pom
   fi
}

testinit(){
   ## copy default schema sql for crud test
   if [ ! -e $dir/src/main/resources/sql/cg-mysql-schema.sql ];then
      if [ ! -d $dir/src/main/resources/sql ];then
          mkdir -p $dir/src/main/resources/sql
      fi
      cp $dir/assets/src/main/resources/sql/cg-mysql-schema.sql $dir/src/main/resources/sql
   fi
   if [ ! -e $dir/src/main/java/com/jfeat/AmApplication.java ];then
      if [ ! -d $dir/src/main/java/com/jfeat ];then
          mkdir -p $dir/src/main/java/com/jfeat
      fi
      cp $dir/assets/src/main/java/com/jfeat/AmApplication.java $dir/src/main/java/com/jfeat
   fi
   if [ ! -e $dir/pom.xml ];then
      cp $dir/assets/pom.xml $dir
   fi

   ## reset src file
   if [ -d src/main/java/com/jfeat/am ];then
      #echo "rm -rf src/main/java/com/jfeat/am"
      rm -rf src/main/java/com/jfeat/am
   fi
}

gen() {
   if [ "$gen"x == "--gen"x ];then
      echo "mvn com.jfeat:sb-code-generator:1.3.3:generate -f $pom"
      mvn com.jfeat:sb-code-generator:1.3.3:generate -f $pom
   fi
}


### main ##

## check test init first
if [[ $cmd == test* ]];then
    testinit
fi

## check cmd and exec
if [ "$cmd"x == "moduleget"x ];then
   moduleget

elif [ "$cmd"x == "moduleset"x ];then
   moduleset $@

elif [ "$cmd"x == "dbgetconfig"x ];then
   dbgetconfig $@

elif [ "$cmd"x == "dbsetconfig"x ];then
   dbsetconfig $@

elif [ "$cmd"x == "dbsanity"x ];then
   dbsanity

elif [ "$cmd"x == "dbrunsql"x ];then
    schema=$4
    dbrunsql $schema

elif [ "$cmd"x == "dbshowtables"x ];then
   dbshowtables

elif [ "$cmd"x == "dbshowcreatetable"x ];then
   tab=$5
   dbshowcreatetable $tab

elif [ "$cmd"x == "crudreset"x ];then
   echo done #do nothing

elif [ "$cmd"x == "crudone"x -o "$cmd"x == "testcrudone"x ];then
   master=$3

   if [ "$cmd"x == "testcrudone"x ];then
      master='cg_master_resource'
   fi

   shift; ## shift crud
   shift; ## shift one

   # for master in $@;do

   #    if [[ $master == --* ]];then
   #       continue
   #    fi
 
   #    # config table
   #    $CONFCLI table reset --save
   #    $CONFCLI table add $master --save
   #    # config crud
   #    $CONFCLI crud reset --save
   #    $CONFCLI crud add one $master --save
   #    # config end

   #    $CONFCLI list -t -c
   #    ## gen crud
   #    gen

   # done

   # config table
   $CONFCLI table reset --save
   $CONFCLI crud reset --save
   for master in $@;do
      if [[ $master == --* ]];then
         continue
      fi
 
      $CONFCLI crud add one $master --save
   done
   
   $CONFCLI list -t -c
   ## gen crud
   gen


elif [ "$cmd"x == "crudonemany"x ];then
   master=$3; 
   
   shift; ## shift cmd
   shift; ## shift onemany
   shift; ## shift master

   ## first#1 step, genreate master model

   # config table
   $CONFCLI table reset --save
   # $CONFCLI table add $master $@ --save

   # config crud
   $CONFCLI crud reset --save
   $CONFCLI crud add onemany $master $@ --save
   # config end

   $CONFCLI list -t -c
   ## gen crud
   gen


   ## second#2 step, generator all slaves && children
   $CONFCLI crud reset --save
   $CONFCLI table add $@ --save

   $CONFCLI list -T  ## do not need to show the config
   ## gen crud
   gen

elif [ "$cmd"x == "testcrudonemany"x ];then
   master='cg_master_resource'
   slave='cg_master_resource_item:master_id'
   slave_master='cg_master_resource_item'

   # config table
   $CONFCLI table reset --save
   #$CONFCLI table add $master $slave --save

   # config crud
   $CONFCLI crud reset --save
   $CONFCLI crud add onemany $master $slave  --save
   # config end

   $CONFCLI list -t -c

   ## gen crud
   gen

elif [ "$cmd"x == "testcrudonemanyx2"x ];then
   master='cg_master_resource'
   slave='cg_master_resource_item:master_id'
   slave2='cg_master_resource_record:other_id'
   slave_master='cg_master_resource_item'
   slave2_master='cg_master_resource_record'

   # config table
   $CONFCLI table reset --save
   #$CONFCLI table add $master $slave $slave2 --save

   # config crud
   $CONFCLI crud reset --save
   $CONFCLI crud add onemany $master $slave $slave2 --save
   # config end

   $CONFCLI list -t -c

   ## gen crud
   gen
    
elif [ "$cmd"x == "crudmanymany"x -o "$cmd"x == "testcrudmanymany"x ];then
   master=$3; 
   peer=$4; 
   relation=$5

   if [ "$cmd"x == "testcrudmanymany"x ];then
       master='cg_master_resource'
       peer='cg_master_resource_peer'
       relation='cg_master_resource_relation'
   fi

   # config table
   $CONFCLI table reset --save
   #$CONFCLI table add $master $peer $relation --save

   # config crud
   $CONFCLI crud reset --save
   $CONFCLI crud add manymany $master $peer $relation --save
   # config end
   
   # show the result [-t - show tables] and  [-c - show cruds]
   $CONFCLI list -t -c

   ## gen crud
   gen

elif [ "$cmd"x == "crudgroup"x -o "$cmd"x == "crudgroupby"x -o "$cmd"x == "testcrudgroup"x -o "$cmd"x == "testcrudgroupby"x -o  "$cmd"x == "testcrudgroupbyfield"x ];then

   if [ "$cmd"x == "crudgroup"x ];then

      shift  ## crud
      shift  ## group

      ## skip --gen
      for group in $@;do
         if [[ $group == --* ]];then
            continue
         fi

         # config table
         $CONFCLI table reset --save
         #$CONFCLI table add $group --save

         # config crud
         $CONFCLI crud reset --save
         $CONFCLI crud add group $group --save
         # config end

         $CONFCLI list -t -c
         ## gen crud
         gen
      done


   elif [ "$cmd"x == "testcrudgroup"x ];then

      group='cg_master_resource_category'

      # config table
      $CONFCLI table reset --save
      #$CONFCLI table add $group --save

      # config crud
      $CONFCLI crud reset --save
      $CONFCLI crud add group $group --save
      # config end

      $CONFCLI list -t -c
      ## gen crud
      gen

   ## gen groupby second step
   elif [ "$cmd"x == "crudgroupby"x -o "$cmd"x == "testcrudgroupby"x -o  "$cmd"x == "testcrudgroupbyfield"x ];then

      if [ "$cmd"x == "crudgroupby"x ];then
         group=$3;
         groupBy=$4;
         groupId=$5;

      elif [ "$cmd"x == "testcrudgroupby"x ];then
         group='cg_master_resource_category'
         groupBy='cg_master_resource'
         groupId='category_id'

      elif [ "$cmd"x == "testcrudgroupbyfield"x ];then
         group='cg_master_resource_category'
         groupBy='cg_master_resource'
         groupId='category_field:field'
      fi

      ### gen group as first step

      # config table
      $CONFCLI table reset --save
      #$CONFCLI table add $group --save

      # config crud
      $CONFCLI crud reset --save
      $CONFCLI crud add group $group --save
      # config end

      $CONFCLI list -t -c
      ## gen crud
      gen


      ### gen groupby as second step

      # config table
      $CONFCLI table reset --save
      #$CONFCLI table add $groupBy --save

      # config crud
      $CONFCLI crud reset --save
      $CONFCLI crud add group $group $groupBy $groupId --save
      # config end

      $CONFCLI list -t -c
      ## gen crud
      gen
   fi

elif [ "$cmd"x == "crud_f"x ];then

      cruds=$3

      $CONFCLI table reset --save

      ## ** CODE-GENERATOR DO NOT SUPPORT MULTI EXECUTION **

      ## BEGIN 
      ## config crud
      #$CONFCLI crud reset --save
      #$CONFCLI crud add -f $cruds --save
      ## config end
   
      ##$CONFCLI list -t -c
      ## gen crud
      ##gen
      ## END


      ## ** EXECUTE FOR EACH CRUD **

      result=$(cat $cruds)
      result=${result//[[:space:]]/}  ## remove space
      result=${result//\<cruds\>/}  ## remove <cruds>
      result=${result//\<\/cruds\>/}  ## remove </cruds>
      result=${result//\<\/crud\>/\<\/crud\> }  ## replace </crud> with </crud>[[:space:]]

      for crud in $result;do
         ## config crud
         $CONFCLI crud reset --save
         $CONFCLI crud add -l $crud --save
            
         $CONFCLI list -t -c
         ## gen crud
         gen

      done


elif [ "$cmd"x == "crudinitializetable"x ];then

   if [ ! -e $dir/src/main/resources/sql/cg-mysql-schema.sql ];then
      if [ ! -d $dir/src/main/resources/sql ];then
          mkdir -p $dir/src/main/resources/sql
      fi
      cp $dir/assets/src/main/resources/sql/cg-mysql-schema.sql $dir/src/main/resources/sql
   fi

   shift ## shift crud
   shift ## shift init
   shift ## shift table

   # config tables
   $CONFCLI table reset --save
   $CONFCLI table add $@ --save

   $CONFCLI crud reset --save
   #for t in $@;do 
   #    $CONFCLI crud add one $t --save
   #done

   $CONFCLI list -T

   # gen persistance
   crudinitializetable

else
    usage
    exit
fi
