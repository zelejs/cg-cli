#!/usr/bin/env perl
## change the port from 8080 to custom
use lib qw(local);
use XML::Smart;
use Data::Dumper;
use Cwd;
my $cwd = cwd();
#
#### how to set node attribute
# my $node = XML::Smart->new("<crud></crud>");
# $node->{crud}->{mask} = "peer";
# print Dumper($node->data);
# exit(0);
#
#### how to set node content
# my $node = XML::Smart->new("<crud></crud>");
# $node->{crud}->content(0, "string");
# print Dumper($node->data);
# exit(0);
#
#### how to get node hash
# my $node = XML::Smart->new("<crud><mask>master</mask><master>cg-master</master></crud>");
# print Dumper($node->pointer_ok)."\n";
# my $hash = $node->pointer_ok;
# print $hash->{crud}->{mask}->{CONTENT}."\n";
# exit(0);
#
#### how to add child node to parent NODE  1/2
# my $XML = XML::Smart->new("<cruds></cruds>");
# my $node = XML::Smart->new("<crud><mask>master</mask><master>cg-master</master></crud>");
# push(@{$XML->{cruds}->{crud}}, $node->cut_root->pointer);
# print Dumper($XML->data);
# exit(0);
#### how to add child node to parent NODE  2/2
# my $XML = XML::Smart->new("<cruds></cruds>");
# my $node = XML::Smart->new();
# $node->{crud}->{mask}->content(0, "peer");
# $node->{crud}->{master}->content(0, "master");
# push(@{$XML->{cruds}->{crud}}, $node->cut_root->pointer);
# push(@{$XML->{cruds}->{crud}}, $node->cut_root->pointer);
# print Dumper($XML->data);
# exit(0);
#
#### how to remove node from parent NODE
#  my $XML = XML::Smart->new("<configuration><cruds></cruds></configuration>");
#  $XML->{configuration}->{cruds} = ();
#  print Dumper($XML->data);
#  exit(0);
#### how to empty nodes from parent NODE
#  my $XML = XML::Smart->new("<configuration><cruds></cruds></configuration>");
#  $XML->{configuration}->{cruds} = {};
#  print Dumper($XML->data);
#  exit(0);
#
### how to replace nodes within parent NODE
#  my $XML = XML::Smart->new("<configuration><cruds><crud><mask>placeholder</mask></crud></cruds></configuration>");
#  my $nodes = XML::Smart->new("<cruds><crud><mask>master</mask><master>cg-master</master></crud></cruds>");
#  $XML->{configuration}->{cruds} = $nodes->{cruds};
#  print Dumper($XML->data);
#  exit(0);
#
my $root = $0;
$root =~ s/\/[\w\.-]+$//;
$root =~ s/\/[\w\.-]+$//;
my $POM = "code-generator-pom.xml";
my $pom = "gen/$POM";
if( ! (-e $pom) ){
    if(!(-d "gen")){
         print `mkdir gen`;
    }
    print `cp $root/assets/$POM $pom`;
}

## get args
my $domain = shift @ARGV;
my $cmd = shift @ARGV;

my $dump=undef;
my $save=undef;
my $list=undef;
my $out=undef;
foreach(@ARGV){
  if(/--list/){
    $list=1;
  }
  if(/--dump/){
    $dump=1;
  }
  if(/--save/){
    $save=1;
    $out=undef;
  }
  if(/--out/){
    $out=1;
    $save=undef;
  }
}

sub usage {
    print "Usage: \n";
    print "   conf-cli [OPTIONS] [--list] [--save] [--dump]\n";
    print "   conf-cli list -t -c\n";
    print "OPTIONS:\n";
    print "   conf-cli table reset\n";
    print "   conf-cli table add <table> [...]\n";
    print "   conf-cli crud  reset\n";
    print "   conf-cli crud  add one      <master> [...]\n";
    print "   conf-cli crud  add onemany  <master> <slave:mid> [slave:mid:id] [slave:relation::mid:id] [...]\n";
    print "   conf-cli crud  add manymany <master> <peer> <relation>\n";
    print "   conf-cli crud  add group    <group> [groupBy] [groupId]\n";
    print "   conf-cli crud  add -f       </path/to/cruds.xml>\n";
    print "   conf-cli crud  add -l       <crud></crud>\n";
}
sub usage_list {
    print "Usage: \n";
    print "   conf-cli list -t -c\n";
}
sub usage_table {
    print "Usage: \n";
    print "   conf-cli table reset\n";
    print "   conf-cli table add <table>  [...]\n";
}
sub usage_crud {
    print "Usage: \n";
    print "   conf-cli crud  reset\n";
    print "   conf-cli crud  add one      <master> [...]\n";
    print "   conf-cli crud  add onemany  <master> <slave:mid> [slave:mid:id] [slave:relation::mid:id] [...]\n";
    print "   conf-cli crud  add manymany <master> <peer> <relation>\n";
    print "   conf-cli crud  add group    <group> [groupBy] [groupId]\n";
    print "   conf-cli crud  add -f       </path/to/cruds.xml>\n";
    print "   conf-cli crud  add -l       <crud></crud>\n";
    
}
sub usage_crud_add {
    print "Usage: \n";
    print "   conf-cli crud  add one      <master> [...]\n";
    print "   conf-cli crud  add onemany  <master> <slave:mid> [slave:mid:id] [slave:relation::mid:id] [...]\n";
    print "   conf-cli crud  add manymany <master> <peer> <relation>\n";
    print "   conf-cli crud  add group    <group> [groupBy] [groupId]\n";
    print "   conf-cli crud  add -f       </path/to/cruds.xml>\n";
    print "   conf-cli crud  add -l       <crud></crud>\n";
}

if( !$domain ){
   usage();
   exit(0);
}
if($domain =~ /^list$/){
    my @args;
    push(@args, $cmd);
    push(@args, @ARGV);
    @ARGV = @args;

    my $args =@ARGV;
    if($args==0){
       usage_list;
       exit;
    }

    foreach(@ARGV){
        if(/-t/ || /-T/ || /-c/){
            # ok
        }else{
            usage_list;
            exit;
        }
    }
}
   
elsif($domain =~ /^table$/){
   ## ok
   if($cmd =~ /^add$/){
      my $args = @ARGV;
      if($args==0){
         usage;
         exit;
      }
   }elsif($cmd =~ /^reset$/){
   }else{
      usage_table;
      exit;
   }
}
elsif ($domain =~ /^crud$/){

    ## ok
    if($cmd =~ /^reset$/){
       ## ok
    }elsif($cmd =~ /^add$/){
        ## ok
        my $op = $ARGV[0];
        my $arg = @ARGV;

        if($op =~ /^one$/){
          ## ok
          if ($arg==1){
              usage_crud_add;
              exit;
          }

        }elsif($op =~ /^onemany$/){
            ## ok
            if ($arg<2){
                usage_crud_add;
                exit;
            }
        }
        elsif($op =~ /^manymany$/){
            ## ok
            if ($arg<3){
                usage_crud_add;
                exit;
            }
        }
        elsif($op =~ /^group$/){
            ## ok
            if ($arg<1){
                usage_crud_add;
                exit;
            }
        }
        elsif($op =~ /^\-f$/){
            ## ok
            if ($arg<1){
                usage_crud_add;
                exit;
            }

            my $cruds_file = $ARGV[1];
            if($cruds_file && (!(-e $cruds_file))){
                print "conf-cli crud add -f </path/to/cruds.xml>\n";
                die "\nFatal: file $cruds_file not exists!\n";
            }elsif(!($cruds_file)){
                usage_crud_add;
                exit
            }
        }
        elsif($op =~ /^\-l$/){
            ## ok
            if ($arg<1){
                usage_crud_add;
                exit;
            }

            my $crud_line = $ARGV[1];
            if($crud_line =~ /^\<crud\>/ && $crud_line =~ /\<\/crud\>$/){
                ## pass
            }else{
                die "Syntax Error: Invalid input line: $crud_line\n";
            }

        }else{
           usage_crud_add;
           exit;
        }
    }
    else{
       usage_crud;
       exit;
    }
   
}else{
   usage_crud;
   exit;
}


my $XML = XML::Smart->new($pom);
#$XML = $XML->cut_root ;
#my $connector = $XML->{Service}[0]{Connector}("protocol", "eq", "HTTP/1.1");
#my $port = $connector->{port};
my $output = "$cwd/cruds.xml";
my $output_exitst = undef;
if(-e $output){
    $output_exitst=1;
}
my $OUTPUT = XML::Smart->new($output_exitst ? $output : "<cruds></cruds>");

##
sub get_cruds_node{
    ##return $XML->{project}{build}{plugins}{plugin}{configuration}{cruds};

    ## user cruds.xml for config
    return $OUTPUT->{cruds};
}

## 
if($domain =~ /^list$/){
    foreach(@ARGV){

        ## do not need to config table, due to code-generator enhanced.        
        if(/-T/){
            &table_list;
        }

        if(/-c/){
            &crud_list;
        }
    }
}

elsif($domain =~ /^table$/){
    if ($cmd =~ /add/){
       my @tabs_in = @ARGV;

       ## skip --dump, --save
       my @tabs;
       foreach(@tabs_in){
           if(/^--/){
               next;
           }
           push(@tabs, $_);
       }
       ## skip end

       &table_add(\@tabs);
       if($list){
           &table_list;
       }
       
    }elsif ($cmd =~ /reset/){
       &table_reset();
       if($list){
           &table_list;
       }
    }
    
}elsif($domain =~ /^crud$/){

    if($cmd =~ /^reset$/){
        &crud_reset;
        if($list){
           &table_list;
        }

    }elsif($cmd =~ /^add$/){

        my $op = shift @ARGV;

        if($op =~ /^one$/){
            #my $master = shift @ARGV;
            my $ones = \@ARGV;

            &crud_add_one($ones);
            if($list){
                &crud_list;
            }
           
        }elsif ($op =~ /^onemany$/){
            my $master = shift @ARGV;
            my @slaves_in = @ARGV;

            ## skip --dump, --save
            my @slaves;
            foreach(@slaves_in){
                if(/^--/){
                    next;
                }
                push(@slaves, $_);
            }
            ## skip end

            &crud_add_onemany($master,\@slaves);
            if($list){
                &crud_list;
            }
           
        }elsif ($op =~ /^manymany$/){
            my $master = shift @ARGV;
            my $peer = shift @ARGV;
            my $relation = shift @ARGV;

            &crud_add_manymany($master, $peer, $relation);
            if($list){
                &crud_list;
            }
           
        }elsif ($op =~ /^group$/){

            my @args_in = @ARGV;
            ## skip --dump, --save
            my @args;
            foreach(@args_in){
                if(/^--/){
                    next;
                }
                push(@args, $_);
            }
            ## skip end

            my $group = shift @args;
            my $groupBy = shift @args;
            my $groupId = shift @args;

            &crud_add_group($group, $groupBy, $groupId);
            if($list){
                &crud_list;
            }

        }elsif ($op =~ /^\-f$/){

            my @args_in = @ARGV;
            ## skip --dump, --save
            my @args;
            foreach(@args_in){
                if(/^--/){
                    next;
                }
                push(@args, $_);
            }
            ## skip end

            my $cruds_file = shift @args;
            &crud_add_cruds_file($cruds_file);

            if($list){
                &crud_list;
            }

        }elsif ($op =~ /^\-l$/){

            my @args_in = @ARGV;
            ## skip --dump, --save
            my @args;
            foreach(@args_in){
                if(/^--/){
                    next;
                }
                push(@args, $_);
            }
            ## skip end

            my $crud_line = shift @args;
            &crud_add_crud_line($crud_line);

            if($list){
                &crud_list;
            }
        }
    }
}


if($dump){
## get or chng server port
##$connector->{port} = $server_port;
print "\n##############################################\n";
#print Dumper($XML->data);
#use cruds.xml for config
print Dumper($OUTPUT->data);
print "\n##############################################\n";
}
if($save){
    ## save cruds.xml first
    $OUTPUT->save($output);

    ## update into XML
    my $configuration =  $XML->{project}{build}{plugins}{plugin}{configuration};
    $configuration->{cruds} = $OUTPUT->{cruds};
    $XML->save($pom);
}

########################################
## Table Domain
########################################
sub table_list {
    # my @tables =  $XML->{project}{build}{plugins}{plugin}{configuration}{tables}->nodes;
    # my $TABLES = &create_table(\@tables);
    # my $data = Dumper($TABLES->data);
    # my @lines = split(/\n/,$data);
    # foreach(@lines){
    #    if(/table/){
    #       print;
    #       print "\n";
    #    }
    # }

    # return;
    
    my $tables_node =  $XML->{project}{build}{plugins}{plugin}{configuration}{tables};
    my @tables = @{$tables_node->{table}};

    my $TABLES_NEW = XML::Smart->new();
    $TABLES_NEW = $TABLES_NEW->{tables};

    foreach(@tables){
       push(@{$TABLES_NEW->{table}}, $_);
    }

    ## dump data
    my $data = Dumper($TABLES_NEW->data);

    my @lines = split(/\n/,$data);
    foreach(@lines){
        if(/meta/ || /xml/ || /[\$;]/){
            next;
        }
        print;
        print "\n";
    }
}

sub table_add {
    my ($tabs_ref) = @_;
    my @tabs_mid = @{$tabs_ref};

    ## get masterId from slave
    my @tabs;
    my $masterId = undef;
    foreach(@tabs_mid){
        ## get slave table
        my $tab = $_;

        ## remove  :field$_$ 
        $tab =~ s/:[\w+\$_]+$//;
        $tab =~ s/:[\w+\$_\,]+$//;

        ## remove ::relation
        ##$tab =~ s/::[\w+\$_]+$//;
        my $relationTab = $tab;
        $tab =~ s/:[\w+\$_]+:$//;
        push(@tabs, $tab);

        if(!($relationTab eq $tab)){
            $relationTab =~ s/^[\w+\$_]+//;
            $relationTab =~ s/^://;
            $relationTab =~ s/:$//;
            push(@tabs, $relationTab);
        }
    }
    ## end
 
    my $tables_node =  $XML->{project}{build}{plugins}{plugin}{configuration}{tables};

    my $TABLE = XML::Smart->new();
    foreach(@tabs){
        #my $table_new = XML::Smart->new();
        #$table_new->{table}->content(0, $_);
        #push(@{$tables_node->{table}}, $table_new->nodes);

        my $table_new = XML::Smart->new();
        $table_new->content(0, $_);

        push(@{$TABLE->{table}}, $table_new);
    }
    push(@{$tables_node}, $TABLE);
}

sub table_reset {
    my $tables_ref =  $XML->{project}{build}{plugins}{plugin}{configuration};
    my @empty=();
    $tables_ref->{tables} = \@empty;
}



########################################
## CRUD Domain 
########################################
sub crud_list {

   #my $cruds_node =  $XML->{project}{build}{plugins}{plugin}{configuration}{cruds};
   my $cruds_node = get_cruds_node();
   my @cruds = @{$cruds_node->{crud}};

   my $CRUDS_NEW = XML::Smart->new();
   $CRUDS_NEW = $CRUDS_NEW->{cruds};

   foreach(@cruds){
       push(@{$CRUDS_NEW->{crud}}, $_);
   }

    ## dump data
    my $data = Dumper($CRUDS_NEW->data);

    my @lines = split(/\n/,$data);
    foreach(@lines){
        if(/meta/ || /xml/ || /[\$;]$/){
            next;
        }
        print;
        print "\n";
    }
}

sub crud_reset {
    # my $configuration =  $XML->{project}{build}{plugins}{plugin}{configuration};
    # my @empty=();
    # $configuration->{cruds} = \@empty;
    
    ## only reset cruds.xml
    $OUTPUT->{cruds} = {};
}

sub crud_add_one {
   my($tabs_ref) = @_;
   my @tabs = @{$tabs_ref};

   #my $cruds_node =  $XML->{project}{build}{plugins}{plugin}{configuration}{cruds};
   my $cruds_node = get_cruds_node();

   ## build hash for create_crud
   foreach(@tabs){
       if(/--/){
           next;
       }
       s/\:\w+$//;  ## remove :mid for slave item

       my $tab = $_;

       my $hash = {};
       $hash->{mask} = 'master';
       $hash->{master} = $tab;

       my $crud = &create_crud($hash);
       $crud = $crud->cut_root;

       push(@{$cruds_node->{crud}}, $crud->pointer);
   }
}

sub crud_add_onemany {
    my($master, $slaves_ref) = @_;
    my @slaves_mid = @{$slaves_ref};

    ## get masterId from slave
    my @slaves;
    my @ids;   ## for masterId list

    foreach(@slaves_mid){
        ## get masterId only at first slave
        my $masterId = $_;
        $masterId =~ s/^\w+://;  ## remove table name
        $masterId =~ s/^\://;    ## remove :

        push(@ids, $masterId);

        ## get slave table
        my $slave = $_;

        ## remove after : (including $_$ or :)
        $slave =~ s/:[\w\$_]+$//;
        $slave =~ s/:[\w\$_]+$//;

        ## remove after :
        $slave =~ s/:[\w\$_]+:$//;  ## remove relation::mid:id
        $slave =~ s/:[\w\$_\,]+$//; ## remove mid1,mid2

        push(@slaves, $slave);
    }
    ## end

    #my $cruds_node =  $XML->{project}{build}{plugins}{plugin}{configuration}{cruds};
    my $cruds_node = get_cruds_node();

    ## build hash for create_crud
    my $hash = {};
    $hash->{mask} = 'master';
    $hash->{master} = $master;
    $hash->{slaves} = \@slaves;
    ## join masterId together
    $hash->{masterId} = join(';', @ids); ## join as $masterId;

    my $crud = &create_crud($hash);

    $crud = $crud->cut_root;

    push(@{$cruds_node->{crud}}, $crud->pointer);
}

sub crud_add_manymany{
    my($master, $peer, $relation) = @_;

    #my $cruds_node =  $XML->{project}{build}{plugins}{plugin}{configuration}{cruds};
    my $cruds_node = get_cruds_node();

    ## build hash for create_crud
    my $hash = {};
    $hash->{mask} = 'peer';
    $hash->{master} = $master;
    $hash->{masterPeer} = $peer;
    $hash->{relation} = $relation;

    my $crud = &create_crud($hash);
    $crud = $crud->cut_root;

    push(@{$cruds_node->{crud}}, $crud->pointer);
}

sub crud_add_group{
    my($group, $groupBy, $groupId) = @_;

    #my $cruds_node =  $XML->{project}{build}{plugins}{plugin}{configuration}{cruds};
    my $cruds_node = get_cruds_node();

    ## build hash for create_crud
    my $hash = {};
    $hash->{mask} = 'group';
    $hash->{group} = $group;

    if($groupBy){
        $hash->{groupBy} = $groupBy;
        $hash->{groupId} = $groupId;
    }

    my $crud = &create_crud($hash);
    $crud = $crud->cut_root;

    push(@{$cruds_node->{crud}}, $crud->pointer);
}
 
sub crud_add_cruds_file{
    my($cruds_file) = @_;

    my $cruds_XML = XML::Smart->new($cruds_file);
    $cruds_XML = $cruds_XML->cut_root ;

    #my $cruds_node =  $XML->{project}{build}{plugins}{plugin}{configuration}{cruds};
    my $cruds_node = get_cruds_node();

    push(@{$cruds_node}, $cruds_XML->pointer);
}

sub crud_add_crud_line{
    my($crud_line) = @_;

    my $crud_XML = XML::Smart->new($crud_line);

    #my $cruds_node =  $XML->{project}{build}{plugins}{plugin}{configuration}{cruds};
    my $cruds_node = get_cruds_node();

    push(@{$cruds_node}, $crud_XML->pointer);
}


########################################
## TABLE Builder 
########################################
sub create_table {
    my ($tabs_ref) = @_;
    my @tabs = @{$tabs_ref};
    
    my $TABLES = XML::Smart->new();
        my $one = $TABLES->{tables};

       if(@tabs > 1){
           foreach(@tabs){
              push(@{$one->{table}}, $_);
           }
       }else{
           $one->{table}->content(0, $tabs[0]);
       }

    return $TABLES;
}

########################################
## CRUD Builder 
########################################
sub create_crud {
    my ($hash) = @_;
    # $hash = $crud_ref->pointer_ok;

    my $CRUD = XML::Smart->new();

        my $node = $CRUD->{crud};

        if( exists $hash->{mask}){
            my $mask = $hash->{mask};
            $node->{mask}->content(0, $mask);
        }

        if(exists $hash->{master}){
            my $master = $hash->{master};
           $node->{master}->content(0, $master);
        }

        # CHILDREN
        # if(exists $hash->{children}){
        #     my @children = @{$hash->{children}};

        #     my $CHILDREN = XML::Smart->new();

        #     foreach(@children){
        #         my $child_new = XML::Smart->new();
        #         $child_new->content(0, $_);

        #         push(@{$CHILDREN->{child}}, $child_new);
        #     }

        #     push(@{$node->{children}->{slave}}, $CHILDREN->nodes);
        # }

        if(exists $hash->{masterId}){
            my $masterId = $hash->{masterId};
           $node->{masterId}->content(0, $masterId);
        }

        # SLAVES
        if(exists $hash->{slaves}){
            my @slaves = @{$hash->{slaves}};

            my $SLAVE = XML::Smart->new();

            foreach(@slaves){
                my $slave_new = XML::Smart->new();
                $slave_new->content(0, $_);

                push(@{$SLAVE->{slave}}, $slave_new);
            }

            push(@{$node->{slaves}}, $SLAVE);
        }

        # PEER
        if(exists $hash->{masterPeer}){
            my $masterPeer = $hash->{masterPeer};
           $node->{masterPeer}->content(0, $masterPeer);
        }

        if(exists $hash->{relation}){
            my $relation = $hash->{relation};
           $node->{relation}->content(0, $relation);
        }

        # GROUP
        if(exists $hash->{group}){
            my $group = $hash->{group};
           $node->{group}->content(0, $group);
        }

        if(exists $hash->{groupBy}){
            my $groupBy = $hash->{groupBy};
           $node->{groupBy}->content(0, $groupBy);
        }

        if(exists $hash->{groupId}){
            my $groupId = $hash->{groupId};
           $node->{groupId}->content(0, $groupId);
        }
        
    return $CRUD;
}



